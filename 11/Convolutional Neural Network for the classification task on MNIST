{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Convolutional Neural Network for the classification task on MNIST","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOhd6mMTLqhyyLRdA0vWMPc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"ef6bacd89d9d4fbe90ae667bad12663f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_5f81da5337e540a2a6d4cb627dc856bc","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d02202b3b42e4e0881704dcf85096d52","IPY_MODEL_b8fab62629d04d82900c131df9ea37dd"]}},"5f81da5337e540a2a6d4cb627dc856bc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d02202b3b42e4e0881704dcf85096d52":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_c1fc82a551314712a284a3f97c840267","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c9fd390fa8a84ef5beeaa27889a777f1"}},"b8fab62629d04d82900c131df9ea37dd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9d196aed557f4bb4acaa502d22348a74","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 9920512/? [00:03&lt;00:00, 2643255.26it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d5b2fe73436f49848e97a508e8ba4c4b"}},"c1fc82a551314712a284a3f97c840267":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"c9fd390fa8a84ef5beeaa27889a777f1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9d196aed557f4bb4acaa502d22348a74":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d5b2fe73436f49848e97a508e8ba4c4b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7909bb857a4a4de4bbee2e328d7f872a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7dd88362403541cfb5bdf5423528fe5c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3aeac8108846477399b61e804cd357ba","IPY_MODEL_5546d212b5c44ef49b9179ba21aadf8b"]}},"7dd88362403541cfb5bdf5423528fe5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3aeac8108846477399b61e804cd357ba":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_fb587c87178a4edea75c26cdeb55fe4e","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1a2704a55dea4f7fab5130fe3e695044"}},"5546d212b5c44ef49b9179ba21aadf8b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7d849e047fae4a13b70a70bb55963a00","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 32768/? [00:01&lt;00:00, 16690.68it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3efa32fe8fb54f0fa8ee36d0404145b1"}},"fb587c87178a4edea75c26cdeb55fe4e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1a2704a55dea4f7fab5130fe3e695044":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7d849e047fae4a13b70a70bb55963a00":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3efa32fe8fb54f0fa8ee36d0404145b1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d2ce214dbae447768989803927c2f524":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_96b938fcf0db4c698510bb42b84b02f9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ee71d244032947969f1aaba124f12a55","IPY_MODEL_1dd69c61e4e940379d3ff16c6a1377c9"]}},"96b938fcf0db4c698510bb42b84b02f9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ee71d244032947969f1aaba124f12a55":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_899ecad4d2c44a66822a34cad05e3926","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3993a9d7d7f24dd19d56b229ecf06e86"}},"1dd69c61e4e940379d3ff16c6a1377c9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1fee6e64261e4be6b91d158c6816a2f7","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 1654784/? [00:01&lt;00:00, 1049065.26it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_55802432fd0048758a702560d61340d9"}},"899ecad4d2c44a66822a34cad05e3926":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"3993a9d7d7f24dd19d56b229ecf06e86":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1fee6e64261e4be6b91d158c6816a2f7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"55802432fd0048758a702560d61340d9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"93db8341a96e4ce4a9e0427ddbe7ee38":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8094568a4fb34592a6ca00b876ea9959","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_15bfa4b5b21749339e7f8e6f3dedf7a9","IPY_MODEL_67bf008120c54282af142371a39cd9a6"]}},"8094568a4fb34592a6ca00b876ea9959":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"15bfa4b5b21749339e7f8e6f3dedf7a9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7b8825064e014dd4ada61fc9dfcbf5c4","_dom_classes":[],"description":"  0%","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0e41e10c9a37480b8d3ce5fd40084f13"}},"67bf008120c54282af142371a39cd9a6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_a1a282834b7b41dcbae98cd8de47aa70","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/4542 [00:00&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_833e4ed20a29498e8a6d085089b3defd"}},"7b8825064e014dd4ada61fc9dfcbf5c4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"0e41e10c9a37480b8d3ce5fd40084f13":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a1a282834b7b41dcbae98cd8de47aa70":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"833e4ed20a29498e8a6d085089b3defd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"7CTKJvoNaDN6"},"source":["# 0. Setting\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"lViQWOgFaCpA","executionInfo":{"status":"ok","timestamp":1606546084832,"user_tz":-540,"elapsed":5208,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"66d9e138-deaa-4dba-cbc9-f6858befda74"},"source":["# import library\n","import torch\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","import math\n","from pandas import Series, DataFrame\n","import pandas as pd\n","import numpy as np\n","import torch.nn.functional as F\n","import math\n","\n","\n","torch.__version__\n"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'1.7.0+cu101'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"hkB1yaCsaF9k","executionInfo":{"status":"ok","timestamp":1606546084836,"user_tz":-540,"elapsed":3509,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"52b4e8c8-57d6-4309-8eee-fe02e95ee7fc"},"source":["# using gpu \n","use_cuda = True\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(torch.cuda.is_available())\n","print(device)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["True\n","cuda\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sYRIA056aV3r"},"source":["# 1. Data\n","<hr>"]},{"cell_type":"code","metadata":{"id":"sqgSPJpraM6q","executionInfo":{"status":"ok","timestamp":1606546093769,"user_tz":-540,"elapsed":2584,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["from torchvision import transforms, datasets\n","\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.1307,),(0.3081,)),  # mean value = 0.1307, standard deviation value = 0.3081\n","])\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464,"referenced_widgets":["ef6bacd89d9d4fbe90ae667bad12663f","5f81da5337e540a2a6d4cb627dc856bc","d02202b3b42e4e0881704dcf85096d52","b8fab62629d04d82900c131df9ea37dd","c1fc82a551314712a284a3f97c840267","c9fd390fa8a84ef5beeaa27889a777f1","9d196aed557f4bb4acaa502d22348a74","d5b2fe73436f49848e97a508e8ba4c4b","7909bb857a4a4de4bbee2e328d7f872a","7dd88362403541cfb5bdf5423528fe5c","3aeac8108846477399b61e804cd357ba","5546d212b5c44ef49b9179ba21aadf8b","fb587c87178a4edea75c26cdeb55fe4e","1a2704a55dea4f7fab5130fe3e695044","7d849e047fae4a13b70a70bb55963a00","3efa32fe8fb54f0fa8ee36d0404145b1","d2ce214dbae447768989803927c2f524","96b938fcf0db4c698510bb42b84b02f9","ee71d244032947969f1aaba124f12a55","1dd69c61e4e940379d3ff16c6a1377c9","899ecad4d2c44a66822a34cad05e3926","3993a9d7d7f24dd19d56b229ecf06e86","1fee6e64261e4be6b91d158c6816a2f7","55802432fd0048758a702560d61340d9","93db8341a96e4ce4a9e0427ddbe7ee38","8094568a4fb34592a6ca00b876ea9959","15bfa4b5b21749339e7f8e6f3dedf7a9","67bf008120c54282af142371a39cd9a6","7b8825064e014dd4ada61fc9dfcbf5c4","0e41e10c9a37480b8d3ce5fd40084f13","a1a282834b7b41dcbae98cd8de47aa70","833e4ed20a29498e8a6d085089b3defd"]},"id":"xg6JTlymatLg","executionInfo":{"status":"ok","timestamp":1606546098442,"user_tz":-540,"elapsed":5979,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"fcf4a06b-ed75-403f-afd7-097d993166f7"},"source":["data_path = './MNIST'\n","\n","data_test   = datasets.MNIST(root = data_path, train= True, download=True, transform= transform)\n","data_train  = datasets.MNIST(root = data_path, train= False, download=True, transform= transform)\n","\n","print(\"the number of your training data (must be 10,000) = \", data_train.__len__())\n","print(\"hte number of your testing data (must be 60,000) = \", data_test.__len__())\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ef6bacd89d9d4fbe90ae667bad12663f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7909bb857a4a4de4bbee2e328d7f872a","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d2ce214dbae447768989803927c2f524","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz\n","\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"93db8341a96e4ce4a9e0427ddbe7ee38","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Processing...\n","Done!\n","the number of your training data (must be 10,000) =  10000\n","hte number of your testing data (must be 60,000) =  60000\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:480: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)\n","  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"iGD4nqaHbEzy"},"source":["# 2. Model\n","<hr>"]},{"cell_type":"code","metadata":{"id":"hOe3l4eaa16l","executionInfo":{"status":"ok","timestamp":1606548688103,"user_tz":-540,"elapsed":1032,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["class MyModel(nn.Module):\n","\n","    def __init__(self, num_classes=10, size_kernel=5):\n","\n","        super(MyModel, self).__init__()\n","\n","        # *********************************************************************\n","        # input parameter\n","        #\n","        # data size:\n","        #   mnist   : 28 * 28\n","        # \n","        # the tensor given to the model should be of shape [batch_size, 1, height, width]\n","        # because first convolution has in_channels = 1\n","        # *********************************************************************\n","        self.number_class   = num_classes\n","        self.size_kernel    = size_kernel        \n","        \n","        # *********************************************************************\n","        # feature layer\n","        # *********************************************************************\n","        self.conv1          = nn.Conv2d(1, 20, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","        self.conv2          = nn.Conv2d(20, 50, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","\n","        self.conv_layer1    = nn.Sequential(self.conv1, nn.MaxPool2d(kernel_size=2), nn.ReLU(True))\n","        self.conv_layer2    = nn.Sequential(self.conv2, nn.MaxPool2d(kernel_size=2), nn.ReLU(True))\n","\n","        self.feature        = nn.Sequential(self.conv_layer1, self.conv_layer2)\n","        \n","        # *********************************************************************\n","        # classifier layer\n","        # *********************************************************************\n","        self.fc1        = nn.Linear(50*7*7, 50, bias=True)\n","        self.fc2        = nn.Linear(50, num_classes, bias=True)\n","\n","        self.fc_layer1  = nn.Sequential(self.fc1, nn.ReLU(True))\n","        self.fc_layer2  = nn.Sequential(self.fc2, nn.LogSoftmax(dim=1))\n","        \n","\n","        self.classifier = nn.Sequential(self.fc_layer1, self.fc_layer2)\n","        \n","        \n","        # *********************************************************************\n","        # dropout\n","        # *********************************************************************       \n","        self.dropout1 = nn.Dropout(0.25)\n","        self.dropout2 = nn.Dropout(0.5)\n","        \n","        self._initialize_weight()        \n","        \n","    \n","    def _initialize_weight(self):\n","\n","        for m in self.modules():\n","            \n","            if isinstance(m, nn.Conv2d):\n","                \n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","\n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","            elif isinstance(m, nn.Linear):\n","\n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","                \n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","\n","    def forward(self, x):\n","        x = x.to(device)\n","        x = self.feature(x)\n","        x = self.dropout1(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.dropout2(x)\n","        x = self.classifier(x)\n","\n","        return x\n"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yRNF2mR5bgbA"},"source":["# 3. Loss Function\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"Kw5mL8RobkEx","executionInfo":{"status":"ok","timestamp":1606546111462,"user_tz":-540,"elapsed":11931,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"36e22313-4173-454c-e6da-9931b74c98ed"},"source":["model = MyModel(10, 5).to(device)\n","criterion = nn.CrossEntropyLoss()\n","train_y_pred = model.forward(data_train.data.unsqueeze(dim=1).float())\n","train_y = data_train.targets.to(device)\n","temp_loss = criterion(train_y_pred, train_y)\n","print(temp_loss.data.item())"],"execution_count":6,"outputs":[{"output_type":"stream","text":["776.919677734375\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sEsHl_80816c"},"source":["# 4. Optimization\n","<hr>"]},{"cell_type":"markdown","metadata":{"id":"iCxbwftz-Q2k"},"source":["Define Train Function"]},{"cell_type":"code","metadata":{"id":"PUECilgxbumh","executionInfo":{"status":"ok","timestamp":1606546203354,"user_tz":-540,"elapsed":1091,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def train(model, criterion, train_loader, optimizer, batch_size):\n","  \n","  model.train()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  for xs, ts in iter(train_loader):\n","\n","    iteration = iteration + 1\n","    optimizer.zero_grad()\n","    y_pred = model(xs)\n","    ts = ts.to(device)\n","    loss = criterion(y_pred, ts)\n","    loss.backward()\n","    optimizer.step()\n","    \n","    loss_sum = loss_sum + float(loss)\n","    zs = y_pred.max(1, keepdim=True)[1] # first column has actual prob\n","    acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = round(loss_sum/iteration, 5)\n","  acc_avg = round(acc_sum/iteration, 5)\n","  \n","  return loss_avg, acc_avg"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dcK39hpG-VF5"},"source":["Define Test Function"]},{"cell_type":"code","metadata":{"id":"CzMC4pAp-SuO","executionInfo":{"status":"ok","timestamp":1606546210437,"user_tz":-540,"elapsed":1119,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def test(model,criterion, test_loader, batch_size):\n","  model.eval()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  with torch.no_grad():\n","    for xs, ts in iter(test_loader):\n","      iteration = iteration + 1\n","      ts = ts.to(device)\n","      y_pred = model(xs)\n","      loss_sum = loss_sum + criterion(y_pred, ts).data.item()\n","      zs = y_pred.max(1, keepdim=True)[1]\n","      acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = round(loss_sum/iteration, 5)\n","  acc_avg = round(acc_sum/iteration, 5)\n","\n","  return loss_avg, acc_avg"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nBaK5IVA-Yle"},"source":["Define Gradient Descent Fucntion"]},{"cell_type":"code","metadata":{"id":"j8in-lnH-W2i","executionInfo":{"status":"ok","timestamp":1606546213778,"user_tz":-540,"elapsed":1109,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent(model, optimizer, criterion, batch_size, num_epochs):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","  \n","  \n","  # return variables\n","  train_loss_list, train_acc_list = [], []\n","  test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n","\n","\n","  return train_loss_list, train_acc_list, test_loss_list, test_acc_list\n"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"nOMlKMvs_I5P","executionInfo":{"status":"ok","timestamp":1606546215328,"user_tz":-540,"elapsed":836,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent_with_scheduler(scheduler, model, optimizer, criterion, batch_size, num_epochs, train_loss_list, train_acc_list, test_loss_list, test_acc_list):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","\n","  \n","  # return variables\n","  #train_loss_list, train_acc_list = [], []\n","  #test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    scheduler.step(train_loss_avg)\n","        \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vGh6KmWR_XbX"},"source":["# 5. Plot Function\n","<hr>"]},{"cell_type":"code","metadata":{"id":"ndMV9T4F_Nno","executionInfo":{"status":"ok","timestamp":1606560415454,"user_tz":-540,"elapsed":1108,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_loss(train_loss_list, test_loss_list):\n","  plt.title(\"Loss\")\n","  plt.plot(train_loss_list, c = 'red', label = 'train loss')\n","  plt.plot(test_loss_list, c = 'blue', label = 'test loss')\n","  plt.legend(loc = 'upper right')\n","  plt.show()"],"execution_count":64,"outputs":[]},{"cell_type":"code","metadata":{"id":"cHEs1N9t_vNL","executionInfo":{"status":"ok","timestamp":1606546221703,"user_tz":-540,"elapsed":1122,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_accuracy(train_acc_list, test_acc_list):\n","  plt.title(\"Accuracy\")\n","  plt.plot(train_acc_list, c = 'red', label = 'train accuracy')\n","  plt.plot(test_acc_list, c = 'blue', label = 'test accuracy')\n","  plt.legend(loc = 'lower right')\n","  plt.show()"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pjlcXOQE_22Z"},"source":["# 6. Run\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"t5zubL3QCj4R","executionInfo":{"status":"ok","timestamp":1606490334621,"user_tz":-540,"elapsed":834304,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"ca6d6854-7ba2-4b7e-a94a-b5654551ebfc"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model1 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 50\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model1.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model1, optimizer, criterion, batch_size, num_epochs, train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1)\n","\n","# plot\n","plot_loss(train_loss_list1, test_loss_list1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.62      accuracy = 0.8\n","test loss : 0.24       accuracy = 0.92\n","epoch :  10  -------------------------------------- \n","train loss : 0.03      accuracy = 0.98\n","test loss : 0.09       accuracy = 0.97\n","epoch :  20  -------------------------------------- \n","train loss : 0.01      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    24: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    33: reducing learning rate of group 0 to 2.5000e-03.\n","Epoch    39: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  40  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    45: reducing learning rate of group 0 to 6.2500e-04.\n","Epoch    51: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  50  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":950},"id":"aXjcwfTqHOi8","executionInfo":{"status":"ok","timestamp":1606550071039,"user_tz":-540,"elapsed":1374070,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"979f4d21-5e35-4a96-9b7c-236b702ec3b0"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model2 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 100\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model2.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model2, optimizer, criterion, batch_size, num_epochs, train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2)\n","\n","# plot\n","plot_loss(train_loss_list2, test_loss_list2)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.84726      accuracy = 0.72436\n","test loss : 0.26487       accuracy = 0.91923\n","epoch :  10  -------------------------------------- \n","train loss : 0.0737      accuracy = 0.97646\n","test loss : 0.0795       accuracy = 0.97597\n","epoch :  20  -------------------------------------- \n","train loss : 0.04198      accuracy = 0.98718\n","test loss : 0.06594       accuracy = 0.9801\n","Epoch    30: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.02578      accuracy = 0.99069\n","test loss : 0.06463       accuracy = 0.98165\n","epoch :  40  -------------------------------------- \n","train loss : 0.02356      accuracy = 0.99239\n","test loss : 0.06199       accuracy = 0.98247\n","Epoch    46: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  50  -------------------------------------- \n","train loss : 0.02139      accuracy = 0.99149\n","test loss : 0.06239       accuracy = 0.98253\n","epoch :  60  -------------------------------------- \n","train loss : 0.01587      accuracy = 0.99479\n","test loss : 0.0612       accuracy = 0.98315\n","Epoch    71: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  70  -------------------------------------- \n","train loss : 0.01546      accuracy = 0.99429\n","test loss : 0.06202       accuracy = 0.98293\n","epoch :  80  -------------------------------------- \n","train loss : 0.01429      accuracy = 0.99509\n","test loss : 0.06129       accuracy = 0.983\n","Epoch    83: reducing learning rate of group 0 to 6.2500e-04.\n","epoch :  90  -------------------------------------- \n","train loss : 0.01523      accuracy = 0.99519\n","test loss : 0.06138       accuracy = 0.98313\n","Epoch    98: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  100  -------------------------------------- \n","train loss : 0.01534      accuracy = 0.99479\n","test loss : 0.06177       accuracy = 0.98318\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":914},"id":"mhQUn0Zo2itI","executionInfo":{"status":"ok","timestamp":1606554152448,"user_tz":-540,"elapsed":1341434,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"0e1afd25-9654-4770-e3c4-d9ce2abccdd7"},"source":["# model\n","num_classes=10\n","size_kernel=7\n","model3 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 100\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model3.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)\n","\n","# plot\n","plot_loss(train_loss_list3, test_loss_list3)"],"execution_count":34,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.87445      accuracy = 0.70833\n","test loss : 0.24402       accuracy = 0.93017\n","epoch :  10  -------------------------------------- \n","train loss : 0.07214      accuracy = 0.97486\n","test loss : 0.0816       accuracy = 0.97485\n","epoch :  20  -------------------------------------- \n","train loss : 0.03971      accuracy = 0.98688\n","test loss : 0.07057       accuracy = 0.97907\n","epoch :  30  -------------------------------------- \n","train loss : 0.02691      accuracy = 0.99219\n","test loss : 0.07332       accuracy = 0.97922\n","epoch :  40  -------------------------------------- \n","train loss : 0.01742      accuracy = 0.99439\n","test loss : 0.07023       accuracy = 0.98115\n","epoch :  50  -------------------------------------- \n","train loss : 0.0164      accuracy = 0.99479\n","test loss : 0.0702       accuracy = 0.98198\n","epoch :  60  -------------------------------------- \n","train loss : 0.01049      accuracy = 0.997\n","test loss : 0.06953       accuracy = 0.9824\n","Epoch    66: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  70  -------------------------------------- \n","train loss : 0.00873      accuracy = 0.9973\n","test loss : 0.06852       accuracy = 0.983\n","epoch :  80  -------------------------------------- \n","train loss : 0.00945      accuracy = 0.9974\n","test loss : 0.06948       accuracy = 0.9827\n","Epoch    85: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  90  -------------------------------------- \n","train loss : 0.00486      accuracy = 0.999\n","test loss : 0.06863       accuracy = 0.9832\n","Epoch    97: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  100  -------------------------------------- \n","train loss : 0.00734      accuracy = 0.9974\n","test loss : 0.0687       accuracy = 0.9834\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"HmpBNNy4GEZ7","executionInfo":{"status":"ok","timestamp":1606554870323,"user_tz":-540,"elapsed":149263,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"04c4cbad-4dc0-453c-9460-95ddad05d11b"},"source":["# num of epochs\n","num_epochs = 10\n","\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)"],"execution_count":47,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.00588      accuracy = 0.9986\n","test loss : 0.06838       accuracy = 0.98342\n","Epoch   103: reducing learning rate of group 0 to 6.2500e-04.\n","Epoch   109: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  10  -------------------------------------- \n","train loss : 0.00612      accuracy = 0.9981\n","test loss : 0.06843       accuracy = 0.98352\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"eKRksqDLIuz8","executionInfo":{"status":"ok","timestamp":1606555627743,"user_tz":-540,"elapsed":680355,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"851b8e40-c4c5-4a6a-b1d9-0b1af70dc827"},"source":["# num of epochs\n","num_epochs = 50\n","\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)"],"execution_count":48,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.00628      accuracy = 0.9982\n","test loss : 0.06825       accuracy = 0.9835\n","Epoch   115: reducing learning rate of group 0 to 1.5625e-04.\n","Epoch   121: reducing learning rate of group 0 to 7.8125e-05.\n","epoch :  10  -------------------------------------- \n","train loss : 0.0081      accuracy = 0.997\n","test loss : 0.06801       accuracy = 0.98352\n","Epoch   127: reducing learning rate of group 0 to 3.9063e-05.\n","Epoch   133: reducing learning rate of group 0 to 1.9531e-05.\n","epoch :  20  -------------------------------------- \n","train loss : 0.00721      accuracy = 0.9978\n","test loss : 0.06792       accuracy = 0.98347\n","Epoch   139: reducing learning rate of group 0 to 9.7656e-06.\n","epoch :  30  -------------------------------------- \n","train loss : 0.00603      accuracy = 0.9984\n","test loss : 0.06793       accuracy = 0.9835\n","Epoch   145: reducing learning rate of group 0 to 4.8828e-06.\n","Epoch   151: reducing learning rate of group 0 to 2.4414e-06.\n","epoch :  40  -------------------------------------- \n","train loss : 0.00484      accuracy = 0.999\n","test loss : 0.06793       accuracy = 0.9835\n","Epoch   159: reducing learning rate of group 0 to 1.2207e-06.\n","epoch :  50  -------------------------------------- \n","train loss : 0.00594      accuracy = 0.9984\n","test loss : 0.06793       accuracy = 0.98348\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":932},"id":"_jnbbUTBiPFW","executionInfo":{"status":"ok","timestamp":1606563149029,"user_tz":-540,"elapsed":1442723,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"1de55e52-d2bf-4374-c191-13022e047971"},"source":["# model\n","num_classes=10\n","size_kernel=7\n","model4 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 100\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.Adam(model4.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list4, train_acc_list4, test_loss_list4, test_acc_list4 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model4, optimizer, criterion, batch_size, num_epochs, train_loss_list4, train_acc_list4, test_loss_list4, test_acc_list4)\n","\n","# plot\n","plot_loss(train_loss_list4, test_loss_list4)"],"execution_count":82,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 1.45152      accuracy = 0.52764\n","test loss : 0.56167       accuracy = 0.8397\n","epoch :  10  -------------------------------------- \n","train loss : 0.27288      accuracy = 0.92678\n","test loss : 0.16063       accuracy = 0.95632\n","epoch :  20  -------------------------------------- \n","train loss : 0.25856      accuracy = 0.94171\n","test loss : 0.18744       accuracy = 0.96023\n","Epoch    28: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.08073      accuracy = 0.97897\n","test loss : 0.09166       accuracy = 0.97795\n","epoch :  40  -------------------------------------- \n","train loss : 0.07598      accuracy = 0.97967\n","test loss : 0.11809       accuracy = 0.97568\n","epoch :  50  -------------------------------------- \n","train loss : 0.05975      accuracy = 0.98387\n","test loss : 0.09481       accuracy = 0.97922\n","Epoch    59: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  60  -------------------------------------- \n","train loss : 0.03079      accuracy = 0.99179\n","test loss : 0.0886       accuracy = 0.9817\n","epoch :  70  -------------------------------------- \n","train loss : 0.02438      accuracy = 0.99229\n","test loss : 0.06565       accuracy = 0.98393\n","Epoch    74: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  80  -------------------------------------- \n","train loss : 0.01178      accuracy = 0.99549\n","test loss : 0.07367       accuracy = 0.984\n","epoch :  90  -------------------------------------- \n","train loss : 0.01253      accuracy = 0.99539\n","test loss : 0.07908       accuracy = 0.98203\n","Epoch    93: reducing learning rate of group 0 to 6.2500e-04.\n","epoch :  100  -------------------------------------- \n","train loss : 0.00571      accuracy = 0.9985\n","test loss : 0.06625       accuracy = 0.98513\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":562},"id":"fI5AinttoRBI","executionInfo":{"status":"ok","timestamp":1606566822120,"user_tz":-540,"elapsed":509160,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"f53b6bf2-0e6e-49bd-8f15-a887d50480b5"},"source":["num_epochs = 30\n","gradient_descent_with_scheduler(scheduler, model4, optimizer, criterion, batch_size, num_epochs, train_loss_list4, train_acc_list4, test_loss_list4, test_acc_list4)\n","\n","plot_loss(train_loss_list4, test_loss_list4)"],"execution_count":111,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.00191      accuracy = 0.9994\n","test loss : 0.06209       accuracy = 0.98573\n","Epoch   206: reducing learning rate of group 0 to 1.5259e-07.\n","Epoch   212: reducing learning rate of group 0 to 7.6294e-08.\n","epoch :  10  -------------------------------------- \n","train loss : 0.00137      accuracy = 0.9997\n","test loss : 0.0621       accuracy = 0.9857\n","Epoch   218: reducing learning rate of group 0 to 3.8147e-08.\n","epoch :  20  -------------------------------------- \n","train loss : 0.00156      accuracy = 0.9996\n","test loss : 0.0621       accuracy = 0.9857\n","Epoch   226: reducing learning rate of group 0 to 1.9073e-08.\n","epoch :  30  -------------------------------------- \n","train loss : 0.0017      accuracy = 0.9995\n","test loss : 0.0621       accuracy = 0.9857\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"blL3ys_QvQ_Q","executionInfo":{"status":"ok","timestamp":1606566988392,"user_tz":-540,"elapsed":960,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"460c7c23-2ea9-47cf-e37e-5f556c08d707"},"source":["length = len(test_acc_list4)-33\n","print(length)"],"execution_count":117,"outputs":[{"output_type":"stream","text":["200\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qISg3LmyscvZ"},"source":["# 7. Output\n","<hr>"]},{"cell_type":"markdown","metadata":{"id":"s_0Ot6RKsxCa"},"source":["1. Plot the training and testing losses over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"mK27slJbshCl","executionInfo":{"status":"ok","timestamp":1606567109012,"user_tz":-540,"elapsed":1275,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"790f4767-ed0f-41fc-a2ce-51303c3b1bd0"},"source":["plot_loss(train_loss_list4[0:length], test_loss_list4[0:length])"],"execution_count":130,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hL_wzb4rs_3u"},"source":["2. Plot the training and testing accuracies over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"knwCQPkptB29","executionInfo":{"status":"ok","timestamp":1606567114331,"user_tz":-540,"elapsed":1158,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"bf5968c7-0f80-4ace-d0b7-b3849d13ae72"},"source":["plot_accuracy(train_acc_list4[0:length], test_acc_list4[0:length])"],"execution_count":131,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GZuSewTmtCOv"},"source":["3. Print the final training and testing losses at convergence [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"0ATX-xVZtEPx","executionInfo":{"status":"ok","timestamp":1606566276832,"user_tz":-540,"elapsed":1138,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"a28db261-4269-4db8-be5c-8158d102217f"},"source":["data1 = {'' : [train_loss_list4[length-1], test_loss_list4[length-1]]}\n","index1 = ['training', 'testing']\n","frame1 = DataFrame(data1, index = index1)\n","frame1.columns.name = 'loss'\n","frame1"],"execution_count":108,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>loss</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>training</th>\n","      <td>0.00138</td>\n","    </tr>\n","    <tr>\n","      <th>testing</th>\n","      <td>0.06209</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["loss             \n","training  0.00138\n","testing   0.06209"]},"metadata":{"tags":[]},"execution_count":108}]},{"cell_type":"markdown","metadata":{"id":"7ncg1mBCtE4O"},"source":["4. Print the final training and testing accuracies at convergence [20pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"0lHQ6nSvtGVW","executionInfo":{"status":"ok","timestamp":1606566276837,"user_tz":-540,"elapsed":639,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"30005879-d4fc-4f7f-a34b-cb5529a535e7"},"source":["data2 = {'' : [str(train_acc_list4[length-1]) + '0', str(test_acc_list4[length-1])]}\n","index2 = ['training', 'testing']\n","frame2 = DataFrame(data2, index = index2)\n","frame2.columns.name = 'accuracy'\n","frame2"],"execution_count":109,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>accuracy</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>training</th>\n","      <td>0.99990</td>\n","    </tr>\n","    <tr>\n","      <th>testing</th>\n","      <td>0.98573</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["accuracy         \n","training  0.99990\n","testing   0.98573"]},"metadata":{"tags":[]},"execution_count":109}]},{"cell_type":"markdown","metadata":{"id":"O4O9lSxhGVHp"},"source":["5. Print the testing accuracies within the last 10 epochs [5pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_mfxC0ZGVbU","executionInfo":{"status":"ok","timestamp":1606567091083,"user_tz":-540,"elapsed":638,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"e09949bc-5928-4ac6-e206-1854027d2c1d"},"source":["for i in range(10):\n","  idx = length - 10 + i\n","  print(\"[epoch = {0}] {1:0.5f}\".format(idx, test_acc_list4[idx]))"],"execution_count":129,"outputs":[{"output_type":"stream","text":["[epoch = 190] 0.98570\n","[epoch = 191] 0.98570\n","[epoch = 192] 0.98570\n","[epoch = 193] 0.98572\n","[epoch = 194] 0.98572\n","[epoch = 195] 0.98572\n","[epoch = 196] 0.98572\n","[epoch = 197] 0.98573\n","[epoch = 198] 0.98573\n","[epoch = 199] 0.98575\n"],"name":"stdout"}]}]}