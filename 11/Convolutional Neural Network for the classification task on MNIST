{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Convolutional Neural Network for the classification task on MNIST","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPw4ntFj9/s7awzjaroOXal"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"ef6bacd89d9d4fbe90ae667bad12663f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_5f81da5337e540a2a6d4cb627dc856bc","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d02202b3b42e4e0881704dcf85096d52","IPY_MODEL_b8fab62629d04d82900c131df9ea37dd"]}},"5f81da5337e540a2a6d4cb627dc856bc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d02202b3b42e4e0881704dcf85096d52":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_c1fc82a551314712a284a3f97c840267","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c9fd390fa8a84ef5beeaa27889a777f1"}},"b8fab62629d04d82900c131df9ea37dd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9d196aed557f4bb4acaa502d22348a74","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 9920512/? [00:03&lt;00:00, 2643255.26it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d5b2fe73436f49848e97a508e8ba4c4b"}},"c1fc82a551314712a284a3f97c840267":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"c9fd390fa8a84ef5beeaa27889a777f1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9d196aed557f4bb4acaa502d22348a74":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d5b2fe73436f49848e97a508e8ba4c4b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7909bb857a4a4de4bbee2e328d7f872a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7dd88362403541cfb5bdf5423528fe5c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3aeac8108846477399b61e804cd357ba","IPY_MODEL_5546d212b5c44ef49b9179ba21aadf8b"]}},"7dd88362403541cfb5bdf5423528fe5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3aeac8108846477399b61e804cd357ba":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_fb587c87178a4edea75c26cdeb55fe4e","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1a2704a55dea4f7fab5130fe3e695044"}},"5546d212b5c44ef49b9179ba21aadf8b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7d849e047fae4a13b70a70bb55963a00","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 32768/? [00:01&lt;00:00, 16690.68it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3efa32fe8fb54f0fa8ee36d0404145b1"}},"fb587c87178a4edea75c26cdeb55fe4e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1a2704a55dea4f7fab5130fe3e695044":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7d849e047fae4a13b70a70bb55963a00":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3efa32fe8fb54f0fa8ee36d0404145b1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d2ce214dbae447768989803927c2f524":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_96b938fcf0db4c698510bb42b84b02f9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ee71d244032947969f1aaba124f12a55","IPY_MODEL_1dd69c61e4e940379d3ff16c6a1377c9"]}},"96b938fcf0db4c698510bb42b84b02f9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ee71d244032947969f1aaba124f12a55":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_899ecad4d2c44a66822a34cad05e3926","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3993a9d7d7f24dd19d56b229ecf06e86"}},"1dd69c61e4e940379d3ff16c6a1377c9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1fee6e64261e4be6b91d158c6816a2f7","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 1654784/? [00:01&lt;00:00, 1049065.26it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_55802432fd0048758a702560d61340d9"}},"899ecad4d2c44a66822a34cad05e3926":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"3993a9d7d7f24dd19d56b229ecf06e86":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1fee6e64261e4be6b91d158c6816a2f7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"55802432fd0048758a702560d61340d9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"93db8341a96e4ce4a9e0427ddbe7ee38":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8094568a4fb34592a6ca00b876ea9959","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_15bfa4b5b21749339e7f8e6f3dedf7a9","IPY_MODEL_67bf008120c54282af142371a39cd9a6"]}},"8094568a4fb34592a6ca00b876ea9959":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"15bfa4b5b21749339e7f8e6f3dedf7a9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7b8825064e014dd4ada61fc9dfcbf5c4","_dom_classes":[],"description":"  0%","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0e41e10c9a37480b8d3ce5fd40084f13"}},"67bf008120c54282af142371a39cd9a6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_a1a282834b7b41dcbae98cd8de47aa70","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/4542 [00:00&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_833e4ed20a29498e8a6d085089b3defd"}},"7b8825064e014dd4ada61fc9dfcbf5c4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"0e41e10c9a37480b8d3ce5fd40084f13":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a1a282834b7b41dcbae98cd8de47aa70":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"833e4ed20a29498e8a6d085089b3defd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"7CTKJvoNaDN6"},"source":["# 0. Setting\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"lViQWOgFaCpA","executionInfo":{"status":"ok","timestamp":1606546084832,"user_tz":-540,"elapsed":5208,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"66d9e138-deaa-4dba-cbc9-f6858befda74"},"source":["# import library\n","import torch\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","import math\n","from pandas import Series, DataFrame\n","import pandas as pd\n","import numpy as np\n","import torch.nn.functional as F\n","import math\n","\n","\n","torch.__version__\n"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'1.7.0+cu101'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hkB1yaCsaF9k","executionInfo":{"status":"ok","timestamp":1606546084836,"user_tz":-540,"elapsed":3509,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"52b4e8c8-57d6-4309-8eee-fe02e95ee7fc"},"source":["# using gpu \n","use_cuda = True\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(torch.cuda.is_available())\n","print(device)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["True\n","cuda\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sYRIA056aV3r"},"source":["# 1. Data\n","<hr>"]},{"cell_type":"code","metadata":{"id":"sqgSPJpraM6q","executionInfo":{"status":"ok","timestamp":1606546093769,"user_tz":-540,"elapsed":2584,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["from torchvision import transforms, datasets\n","\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.1307,),(0.3081,)),  # mean value = 0.1307, standard deviation value = 0.3081\n","])\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464,"referenced_widgets":["ef6bacd89d9d4fbe90ae667bad12663f","5f81da5337e540a2a6d4cb627dc856bc","d02202b3b42e4e0881704dcf85096d52","b8fab62629d04d82900c131df9ea37dd","c1fc82a551314712a284a3f97c840267","c9fd390fa8a84ef5beeaa27889a777f1","9d196aed557f4bb4acaa502d22348a74","d5b2fe73436f49848e97a508e8ba4c4b","7909bb857a4a4de4bbee2e328d7f872a","7dd88362403541cfb5bdf5423528fe5c","3aeac8108846477399b61e804cd357ba","5546d212b5c44ef49b9179ba21aadf8b","fb587c87178a4edea75c26cdeb55fe4e","1a2704a55dea4f7fab5130fe3e695044","7d849e047fae4a13b70a70bb55963a00","3efa32fe8fb54f0fa8ee36d0404145b1","d2ce214dbae447768989803927c2f524","96b938fcf0db4c698510bb42b84b02f9","ee71d244032947969f1aaba124f12a55","1dd69c61e4e940379d3ff16c6a1377c9","899ecad4d2c44a66822a34cad05e3926","3993a9d7d7f24dd19d56b229ecf06e86","1fee6e64261e4be6b91d158c6816a2f7","55802432fd0048758a702560d61340d9","93db8341a96e4ce4a9e0427ddbe7ee38","8094568a4fb34592a6ca00b876ea9959","15bfa4b5b21749339e7f8e6f3dedf7a9","67bf008120c54282af142371a39cd9a6","7b8825064e014dd4ada61fc9dfcbf5c4","0e41e10c9a37480b8d3ce5fd40084f13","a1a282834b7b41dcbae98cd8de47aa70","833e4ed20a29498e8a6d085089b3defd"]},"id":"xg6JTlymatLg","executionInfo":{"status":"ok","timestamp":1606546098442,"user_tz":-540,"elapsed":5979,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"fcf4a06b-ed75-403f-afd7-097d993166f7"},"source":["data_path = './MNIST'\n","\n","data_test   = datasets.MNIST(root = data_path, train= True, download=True, transform= transform)\n","data_train  = datasets.MNIST(root = data_path, train= False, download=True, transform= transform)\n","\n","print(\"the number of your training data (must be 10,000) = \", data_train.__len__())\n","print(\"hte number of your testing data (must be 60,000) = \", data_test.__len__())\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ef6bacd89d9d4fbe90ae667bad12663f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7909bb857a4a4de4bbee2e328d7f872a","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d2ce214dbae447768989803927c2f524","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz\n","\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"93db8341a96e4ce4a9e0427ddbe7ee38","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Processing...\n","Done!\n","the number of your training data (must be 10,000) =  10000\n","hte number of your testing data (must be 60,000) =  60000\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:480: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)\n","  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"iGD4nqaHbEzy"},"source":["# 2. Model\n","<hr>"]},{"cell_type":"code","metadata":{"id":"hOe3l4eaa16l","executionInfo":{"status":"ok","timestamp":1606548688103,"user_tz":-540,"elapsed":1032,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["class MyModel(nn.Module):\n","\n","    def __init__(self, num_classes=10, size_kernel=5):\n","\n","        super(MyModel, self).__init__()\n","\n","        # *********************************************************************\n","        # input parameter\n","        #\n","        # data size:\n","        #   mnist   : 28 * 28\n","        # \n","        # the tensor given to the model should be of shape [batch_size, 1, height, width]\n","        # because first convolution has in_channels = 1\n","        # *********************************************************************\n","        self.number_class   = num_classes\n","        self.size_kernel    = size_kernel        \n","        \n","        # *********************************************************************\n","        # feature layer\n","        # *********************************************************************\n","        self.conv1          = nn.Conv2d(1, 20, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","        self.conv2          = nn.Conv2d(20, 50, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","\n","        self.conv_layer1    = nn.Sequential(self.conv1, nn.MaxPool2d(kernel_size=2), nn.ReLU(True))\n","        self.conv_layer2    = nn.Sequential(self.conv2, nn.MaxPool2d(kernel_size=2), nn.ReLU(True))\n","\n","        self.feature        = nn.Sequential(self.conv_layer1, self.conv_layer2)\n","        \n","        # *********************************************************************\n","        # classifier layer\n","        # *********************************************************************\n","        self.fc1        = nn.Linear(50*7*7, 50, bias=True)\n","        self.fc2        = nn.Linear(50, num_classes, bias=True)\n","\n","        self.fc_layer1  = nn.Sequential(self.fc1, nn.ReLU(True))\n","        self.fc_layer2  = nn.Sequential(self.fc2, nn.LogSoftmax(dim=1))\n","        \n","\n","        self.classifier = nn.Sequential(self.fc_layer1, self.fc_layer2)\n","        \n","        \n","        # *********************************************************************\n","        # dropout\n","        # *********************************************************************       \n","        self.dropout1 = nn.Dropout(0.25)\n","        self.dropout2 = nn.Dropout(0.5)\n","        \n","        self._initialize_weight()        \n","        \n","    \n","    def _initialize_weight(self):\n","\n","        for m in self.modules():\n","            \n","            if isinstance(m, nn.Conv2d):\n","                \n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","\n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","            elif isinstance(m, nn.Linear):\n","\n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","                \n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","\n","    def forward(self, x):\n","        x = x.to(device)\n","        x = self.feature(x)\n","        x = self.dropout1(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.dropout2(x)\n","        x = self.classifier(x)\n","\n","        return x\n"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yRNF2mR5bgbA"},"source":["# 3. Loss Function\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kw5mL8RobkEx","executionInfo":{"status":"ok","timestamp":1606546111462,"user_tz":-540,"elapsed":11931,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"36e22313-4173-454c-e6da-9931b74c98ed"},"source":["model = MyModel(10, 5).to(device)\n","criterion = nn.CrossEntropyLoss()\n","train_y_pred = model.forward(data_train.data.unsqueeze(dim=1).float())\n","train_y = data_train.targets.to(device)\n","temp_loss = criterion(train_y_pred, train_y)\n","print(temp_loss.data.item())"],"execution_count":6,"outputs":[{"output_type":"stream","text":["776.919677734375\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sEsHl_80816c"},"source":["# 4. Optimization\n","<hr>"]},{"cell_type":"markdown","metadata":{"id":"iCxbwftz-Q2k"},"source":["Define Train Function"]},{"cell_type":"code","metadata":{"id":"PUECilgxbumh","executionInfo":{"status":"ok","timestamp":1606546203354,"user_tz":-540,"elapsed":1091,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def train(model, criterion, train_loader, optimizer, batch_size):\n","  \n","  model.train()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  for xs, ts in iter(train_loader):\n","\n","    iteration = iteration + 1\n","    optimizer.zero_grad()\n","    y_pred = model(xs)\n","    ts = ts.to(device)\n","    loss = criterion(y_pred, ts)\n","    loss.backward()\n","    optimizer.step()\n","    \n","    loss_sum = loss_sum + float(loss)\n","    zs = y_pred.max(1, keepdim=True)[1] # first column has actual prob\n","    acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = round(loss_sum/iteration, 5)\n","  acc_avg = round(acc_sum/iteration, 5)\n","  \n","  return loss_avg, acc_avg"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dcK39hpG-VF5"},"source":["Define Test Function"]},{"cell_type":"code","metadata":{"id":"CzMC4pAp-SuO","executionInfo":{"status":"ok","timestamp":1606546210437,"user_tz":-540,"elapsed":1119,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def test(model,criterion, test_loader, batch_size):\n","  model.eval()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  with torch.no_grad():\n","    for xs, ts in iter(test_loader):\n","      iteration = iteration + 1\n","      ts = ts.to(device)\n","      y_pred = model(xs)\n","      loss_sum = loss_sum + criterion(y_pred, ts).data.item()\n","      zs = y_pred.max(1, keepdim=True)[1]\n","      acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = round(loss_sum/iteration, 5)\n","  acc_avg = round(acc_sum/iteration, 5)\n","\n","  return loss_avg, acc_avg"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nBaK5IVA-Yle"},"source":["Define Gradient Descent Fucntion"]},{"cell_type":"code","metadata":{"id":"j8in-lnH-W2i","executionInfo":{"status":"ok","timestamp":1606546213778,"user_tz":-540,"elapsed":1109,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent(model, optimizer, criterion, batch_size, num_epochs):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","  \n","  \n","  # return variables\n","  train_loss_list, train_acc_list = [], []\n","  test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n","\n","\n","  return train_loss_list, train_acc_list, test_loss_list, test_acc_list\n"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"nOMlKMvs_I5P","executionInfo":{"status":"ok","timestamp":1606546215328,"user_tz":-540,"elapsed":836,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent_with_scheduler(scheduler, model, optimizer, criterion, batch_size, num_epochs, train_loss_list, train_acc_list, test_loss_list, test_acc_list):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","\n","  \n","  # return variables\n","  #train_loss_list, train_acc_list = [], []\n","  #test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    scheduler.step(train_loss_avg)\n","        \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vGh6KmWR_XbX"},"source":["# 5. Plot Function\n","<hr>"]},{"cell_type":"code","metadata":{"id":"ndMV9T4F_Nno","executionInfo":{"status":"ok","timestamp":1606546219977,"user_tz":-540,"elapsed":1114,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_loss(train_loss_list, test_loss_list):\n","  plt.title(\"Loss\")\n","  plt.plot(train_loss_list, c = 'red', label = 'train loss')\n","  plt.plot(test_loss_list, c = 'blue', label = 'test loss')\n","  plt.legend(loc = 'lower right')\n","  plt.show()"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"cHEs1N9t_vNL","executionInfo":{"status":"ok","timestamp":1606546221703,"user_tz":-540,"elapsed":1122,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_accuracy(train_acc_list, test_acc_list):\n","  plt.title(\"Accuracy\")\n","  plt.plot(train_acc_list, c = 'red', label = 'train accuracy')\n","  plt.plot(test_acc_list, c = 'blue', label = 'test accuracy')\n","  plt.legend(loc = 'lower right')\n","  plt.show()"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pjlcXOQE_22Z"},"source":["# 6. Run\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"t5zubL3QCj4R","executionInfo":{"status":"ok","timestamp":1606490334621,"user_tz":-540,"elapsed":834304,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"ca6d6854-7ba2-4b7e-a94a-b5654551ebfc"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model1 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 50\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model1.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model1, optimizer, criterion, batch_size, num_epochs, train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1)\n","\n","# plot\n","plot_loss(train_loss_list1, test_loss_list1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.62      accuracy = 0.8\n","test loss : 0.24       accuracy = 0.92\n","epoch :  10  -------------------------------------- \n","train loss : 0.03      accuracy = 0.98\n","test loss : 0.09       accuracy = 0.97\n","epoch :  20  -------------------------------------- \n","train loss : 0.01      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    24: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    33: reducing learning rate of group 0 to 2.5000e-03.\n","Epoch    39: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  40  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    45: reducing learning rate of group 0 to 6.2500e-04.\n","Epoch    51: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  50  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":950},"id":"aXjcwfTqHOi8","executionInfo":{"status":"ok","timestamp":1606550071039,"user_tz":-540,"elapsed":1374070,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"979f4d21-5e35-4a96-9b7c-236b702ec3b0"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model2 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 100\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model2.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model2, optimizer, criterion, batch_size, num_epochs, train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2)\n","\n","# plot\n","plot_loss(train_loss_list2, test_loss_list2)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.84726      accuracy = 0.72436\n","test loss : 0.26487       accuracy = 0.91923\n","epoch :  10  -------------------------------------- \n","train loss : 0.0737      accuracy = 0.97646\n","test loss : 0.0795       accuracy = 0.97597\n","epoch :  20  -------------------------------------- \n","train loss : 0.04198      accuracy = 0.98718\n","test loss : 0.06594       accuracy = 0.9801\n","Epoch    30: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.02578      accuracy = 0.99069\n","test loss : 0.06463       accuracy = 0.98165\n","epoch :  40  -------------------------------------- \n","train loss : 0.02356      accuracy = 0.99239\n","test loss : 0.06199       accuracy = 0.98247\n","Epoch    46: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  50  -------------------------------------- \n","train loss : 0.02139      accuracy = 0.99149\n","test loss : 0.06239       accuracy = 0.98253\n","epoch :  60  -------------------------------------- \n","train loss : 0.01587      accuracy = 0.99479\n","test loss : 0.0612       accuracy = 0.98315\n","Epoch    71: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  70  -------------------------------------- \n","train loss : 0.01546      accuracy = 0.99429\n","test loss : 0.06202       accuracy = 0.98293\n","epoch :  80  -------------------------------------- \n","train loss : 0.01429      accuracy = 0.99509\n","test loss : 0.06129       accuracy = 0.983\n","Epoch    83: reducing learning rate of group 0 to 6.2500e-04.\n","epoch :  90  -------------------------------------- \n","train loss : 0.01523      accuracy = 0.99519\n","test loss : 0.06138       accuracy = 0.98313\n","Epoch    98: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  100  -------------------------------------- \n","train loss : 0.01534      accuracy = 0.99479\n","test loss : 0.06177       accuracy = 0.98318\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":914},"id":"mhQUn0Zo2itI","executionInfo":{"status":"ok","timestamp":1606554152448,"user_tz":-540,"elapsed":1341434,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"0e1afd25-9654-4770-e3c4-d9ce2abccdd7"},"source":["# model\n","num_classes=10\n","size_kernel=7\n","model3 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 100\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model3.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)\n","\n","# plot\n","plot_loss(train_loss_list3, test_loss_list3)"],"execution_count":34,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.87445      accuracy = 0.70833\n","test loss : 0.24402       accuracy = 0.93017\n","epoch :  10  -------------------------------------- \n","train loss : 0.07214      accuracy = 0.97486\n","test loss : 0.0816       accuracy = 0.97485\n","epoch :  20  -------------------------------------- \n","train loss : 0.03971      accuracy = 0.98688\n","test loss : 0.07057       accuracy = 0.97907\n","epoch :  30  -------------------------------------- \n","train loss : 0.02691      accuracy = 0.99219\n","test loss : 0.07332       accuracy = 0.97922\n","epoch :  40  -------------------------------------- \n","train loss : 0.01742      accuracy = 0.99439\n","test loss : 0.07023       accuracy = 0.98115\n","epoch :  50  -------------------------------------- \n","train loss : 0.0164      accuracy = 0.99479\n","test loss : 0.0702       accuracy = 0.98198\n","epoch :  60  -------------------------------------- \n","train loss : 0.01049      accuracy = 0.997\n","test loss : 0.06953       accuracy = 0.9824\n","Epoch    66: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  70  -------------------------------------- \n","train loss : 0.00873      accuracy = 0.9973\n","test loss : 0.06852       accuracy = 0.983\n","epoch :  80  -------------------------------------- \n","train loss : 0.00945      accuracy = 0.9974\n","test loss : 0.06948       accuracy = 0.9827\n","Epoch    85: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  90  -------------------------------------- \n","train loss : 0.00486      accuracy = 0.999\n","test loss : 0.06863       accuracy = 0.9832\n","Epoch    97: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  100  -------------------------------------- \n","train loss : 0.00734      accuracy = 0.9974\n","test loss : 0.0687       accuracy = 0.9834\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"HmpBNNy4GEZ7"},"source":["# num of epochs\n","num_epochs = 10\n","\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qISg3LmyscvZ"},"source":["# 7. Output\n","<hr>"]},{"cell_type":"markdown","metadata":{"id":"s_0Ot6RKsxCa"},"source":["1. Plot the training and testing losses over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"mK27slJbshCl","executionInfo":{"status":"ok","timestamp":1606554351883,"user_tz":-540,"elapsed":1201,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"96a2ccd8-fb3b-4556-da14-02f3695b0c47"},"source":["plot_loss(train_loss_list3, test_loss_list3)"],"execution_count":35,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hL_wzb4rs_3u"},"source":["2. Plot the training and testing accuracies over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"knwCQPkptB29","executionInfo":{"status":"ok","timestamp":1606554360097,"user_tz":-540,"elapsed":1176,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"5034dacd-cea8-45af-bdab-5babde849131"},"source":["plot_accuracy(train_acc_list3, test_acc_list3)"],"execution_count":36,"outputs":[{"output_type":"display_data","data":{"image/png":"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eeQRzIylS5fys5/9jMLCQtLS0nj66afp27cvf/zjH/n73/9OixYtOOOMM7jnnnsYMWIE999/P7m5uaxbt47c3FxWrFjBpEmTePbZZykuLqayspKXX36ZMWPGUFRURHl5OXfddRdjxowBvI/8/fffj5lx9NFH89e//pWjjz6axYsX07JlSzZv3szgwYOTjxtL/IJeNXqRA1LNYYpnzpzJkiVL+OCDDwghcPbZZzN79mwKCws59NBDefnllwEft6ZTp07827/9G7Nmzao2pEHCtddeyy23+K+f/uhHP+Kll17iBz/4AZdeeinjx4/nnHPOobS0lB07dvDKK6/wwgsv8P7779O2bdt6DUs8b9485s+fT+fOnamoqOC5556jY8eOrFu3juOPP56zzz6bBQsWcNddd/HOO+/QtWtXNmzYQIcOHRgxYgQvv/wyY8eOZfLkyZx77rmNGvIQp6CvrIQdOxT0Io1gfxileObMmcycOZOhQ4cCUFxczJIlS/jOd77DDTfcwG9+8xu+//3v853vfKfObc2aNYt7772Xbdu2JcenGTFiBAUFBZxzzjkAtG7dGvChiq+88kratm0L1G9Y4pEjRyaXCyHw29/+ltmzZ9OiRQsKCgpYs2YNb775JhdccEHygyix/NVXX829997L2LFjeeyxx3j00Ucb+ErVLT5BX17uf9V0IxILIQRuuukmfvrTn+40b968ecyYMYObb76Z0047LVlbr01paSn/8i//Ql5eHj179uS2227b62GJa66fOizxU089RWFhIXPnzqVly5bk5OTs9vmGDx/OihUreOutt6isrGTQoEENLltd4nMytqzM/6pGL3JAqjlM8ahRo5g4cSLFxcUAFBQUsHbtWlatWkXbtm257LLL+PWvf50cKnhXwxwnQrZr164UFxczbdq05PLZ2dk8//zzAGzfvp1t27YxcuRIHnvsseSJ3dRhiefOnQuQ3EZtNm3axEEHHUTLli2ZNWsWX375JQCnnnoqTz/9NOvXr6+2XfBhDy655JJGG62ypvgEfaJGr6AXOSDVHKb49NNP55JLLuGEE07gqKOO4vzzz2fLli188sknDBs2jCFDhnD77bdz8803AzBu3DhGjx7Nd7/73WrbzczM5JprrmHQoEGMGjUq+YtOAE8++SQPPvggRx99NCeeeCJff/01o0eP5uyzzyY3N5ch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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GZuSewTmtCOv"},"source":["3. Print the final training and testing losses at convergence [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"0ATX-xVZtEPx","executionInfo":{"status":"ok","timestamp":1606554368451,"user_tz":-540,"elapsed":1106,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"d87190f6-050c-471a-eea3-980f80d65e6a"},"source":["data1 = {'' : [train_loss_list3[-1], test_loss_list3[-1]]}\n","index1 = ['training', 'testing']\n","frame1 = DataFrame(data1, index = index1)\n","frame1.columns.name = 'loss'\n","frame1"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>loss</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>training</th>\n","      <td>0.00734</td>\n","    </tr>\n","    <tr>\n","      <th>testing</th>\n","      <td>0.06870</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["loss             \n","training  0.00734\n","testing   0.06870"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"7ncg1mBCtE4O"},"source":["4. Print the final training and testing accuracies at convergence [20pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"0lHQ6nSvtGVW","executionInfo":{"status":"ok","timestamp":1606554381781,"user_tz":-540,"elapsed":1145,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"7c2db3d7-d1d4-4beb-cb0e-83e7a7ef8d46"},"source":["data2 = {'' : [train_acc_list3[-1], test_acc_list3[-1]]}\n","index2 = ['training', 'testing']\n","frame2 = DataFrame(data2, index = index2)\n","frame2.columns.name = 'accuracy'\n","frame2"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>accuracy</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>training</th>\n","      <td>0.9974</td>\n","    </tr>\n","    <tr>\n","      <th>testing</th>\n","      <td>0.9834</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["accuracy        \n","training  0.9974\n","testing   0.9834"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"O4O9lSxhGVHp"},"source":["5. Print the testing accuracies within the last 10 epochs [5pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_mfxC0ZGVbU","executionInfo":{"status":"error","timestamp":1606554648674,"user_tz":-540,"elapsed":1094,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"9001824b-38d2-42d9-8e32-b44998564389"},"source":["length = len(test_acc_list3[idx])\n","for i in range(10):\n","  idx = length - 10 + i\n","  print(\"[epoch = {}] {}\".format(idx, test_acc_list3[idx]))"],"execution_count":45,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-45-882cd57ccf0f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlength\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_acc_list3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlength\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m10\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"[epoch = {}] {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_acc_list3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: object of type 'float' has no len()"]}]},{"cell_type":"code","metadata":{"id":"qo0zhtdRHMJP"},"source":[""],"execution_count":null,"outputs":[]}]}