{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Convolutional Neural Network for the classification task on MNIST","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMTqdT3BmMBMvzD3LISxO6n"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"ef6bacd89d9d4fbe90ae667bad12663f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_5f81da5337e540a2a6d4cb627dc856bc","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d02202b3b42e4e0881704dcf85096d52","IPY_MODEL_b8fab62629d04d82900c131df9ea37dd"]}},"5f81da5337e540a2a6d4cb627dc856bc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d02202b3b42e4e0881704dcf85096d52":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_c1fc82a551314712a284a3f97c840267","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c9fd390fa8a84ef5beeaa27889a777f1"}},"b8fab62629d04d82900c131df9ea37dd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9d196aed557f4bb4acaa502d22348a74","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 9920512/? [00:03&lt;00:00, 2643255.26it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d5b2fe73436f49848e97a508e8ba4c4b"}},"c1fc82a551314712a284a3f97c840267":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"c9fd390fa8a84ef5beeaa27889a777f1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9d196aed557f4bb4acaa502d22348a74":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d5b2fe73436f49848e97a508e8ba4c4b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7909bb857a4a4de4bbee2e328d7f872a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7dd88362403541cfb5bdf5423528fe5c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3aeac8108846477399b61e804cd357ba","IPY_MODEL_5546d212b5c44ef49b9179ba21aadf8b"]}},"7dd88362403541cfb5bdf5423528fe5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3aeac8108846477399b61e804cd357ba":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_fb587c87178a4edea75c26cdeb55fe4e","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1a2704a55dea4f7fab5130fe3e695044"}},"5546d212b5c44ef49b9179ba21aadf8b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7d849e047fae4a13b70a70bb55963a00","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 32768/? [00:01&lt;00:00, 16690.68it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3efa32fe8fb54f0fa8ee36d0404145b1"}},"fb587c87178a4edea75c26cdeb55fe4e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1a2704a55dea4f7fab5130fe3e695044":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7d849e047fae4a13b70a70bb55963a00":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3efa32fe8fb54f0fa8ee36d0404145b1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d2ce214dbae447768989803927c2f524":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_96b938fcf0db4c698510bb42b84b02f9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ee71d244032947969f1aaba124f12a55","IPY_MODEL_1dd69c61e4e940379d3ff16c6a1377c9"]}},"96b938fcf0db4c698510bb42b84b02f9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ee71d244032947969f1aaba124f12a55":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_899ecad4d2c44a66822a34cad05e3926","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3993a9d7d7f24dd19d56b229ecf06e86"}},"1dd69c61e4e940379d3ff16c6a1377c9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1fee6e64261e4be6b91d158c6816a2f7","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 1654784/? [00:01&lt;00:00, 1049065.26it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_55802432fd0048758a702560d61340d9"}},"899ecad4d2c44a66822a34cad05e3926":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"3993a9d7d7f24dd19d56b229ecf06e86":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1fee6e64261e4be6b91d158c6816a2f7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"55802432fd0048758a702560d61340d9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"93db8341a96e4ce4a9e0427ddbe7ee38":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8094568a4fb34592a6ca00b876ea9959","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_15bfa4b5b21749339e7f8e6f3dedf7a9","IPY_MODEL_67bf008120c54282af142371a39cd9a6"]}},"8094568a4fb34592a6ca00b876ea9959":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"15bfa4b5b21749339e7f8e6f3dedf7a9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7b8825064e014dd4ada61fc9dfcbf5c4","_dom_classes":[],"description":"  0%","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0e41e10c9a37480b8d3ce5fd40084f13"}},"67bf008120c54282af142371a39cd9a6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_a1a282834b7b41dcbae98cd8de47aa70","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/4542 [00:00&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_833e4ed20a29498e8a6d085089b3defd"}},"7b8825064e014dd4ada61fc9dfcbf5c4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"0e41e10c9a37480b8d3ce5fd40084f13":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a1a282834b7b41dcbae98cd8de47aa70":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"833e4ed20a29498e8a6d085089b3defd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"7CTKJvoNaDN6"},"source":["# 0. Setting\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"lViQWOgFaCpA","executionInfo":{"status":"ok","timestamp":1606546084832,"user_tz":-540,"elapsed":5208,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"66d9e138-deaa-4dba-cbc9-f6858befda74"},"source":["# import library\n","import torch\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","import math\n","from pandas import Series, DataFrame\n","import pandas as pd\n","import numpy as np\n","import torch.nn.functional as F\n","import math\n","\n","\n","torch.__version__\n"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'1.7.0+cu101'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hkB1yaCsaF9k","executionInfo":{"status":"ok","timestamp":1606546084836,"user_tz":-540,"elapsed":3509,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"52b4e8c8-57d6-4309-8eee-fe02e95ee7fc"},"source":["# using gpu \n","use_cuda = True\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(torch.cuda.is_available())\n","print(device)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["True\n","cuda\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sYRIA056aV3r"},"source":["# 1. Data\n","<hr>"]},{"cell_type":"code","metadata":{"id":"sqgSPJpraM6q","executionInfo":{"status":"ok","timestamp":1606546093769,"user_tz":-540,"elapsed":2584,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["from torchvision import transforms, datasets\n","\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.1307,),(0.3081,)),  # mean value = 0.1307, standard deviation value = 0.3081\n","])\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464,"referenced_widgets":["ef6bacd89d9d4fbe90ae667bad12663f","5f81da5337e540a2a6d4cb627dc856bc","d02202b3b42e4e0881704dcf85096d52","b8fab62629d04d82900c131df9ea37dd","c1fc82a551314712a284a3f97c840267","c9fd390fa8a84ef5beeaa27889a777f1","9d196aed557f4bb4acaa502d22348a74","d5b2fe73436f49848e97a508e8ba4c4b","7909bb857a4a4de4bbee2e328d7f872a","7dd88362403541cfb5bdf5423528fe5c","3aeac8108846477399b61e804cd357ba","5546d212b5c44ef49b9179ba21aadf8b","fb587c87178a4edea75c26cdeb55fe4e","1a2704a55dea4f7fab5130fe3e695044","7d849e047fae4a13b70a70bb55963a00","3efa32fe8fb54f0fa8ee36d0404145b1","d2ce214dbae447768989803927c2f524","96b938fcf0db4c698510bb42b84b02f9","ee71d244032947969f1aaba124f12a55","1dd69c61e4e940379d3ff16c6a1377c9","899ecad4d2c44a66822a34cad05e3926","3993a9d7d7f24dd19d56b229ecf06e86","1fee6e64261e4be6b91d158c6816a2f7","55802432fd0048758a702560d61340d9","93db8341a96e4ce4a9e0427ddbe7ee38","8094568a4fb34592a6ca00b876ea9959","15bfa4b5b21749339e7f8e6f3dedf7a9","67bf008120c54282af142371a39cd9a6","7b8825064e014dd4ada61fc9dfcbf5c4","0e41e10c9a37480b8d3ce5fd40084f13","a1a282834b7b41dcbae98cd8de47aa70","833e4ed20a29498e8a6d085089b3defd"]},"id":"xg6JTlymatLg","executionInfo":{"status":"ok","timestamp":1606546098442,"user_tz":-540,"elapsed":5979,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"fcf4a06b-ed75-403f-afd7-097d993166f7"},"source":["data_path = './MNIST'\n","\n","data_test   = datasets.MNIST(root = data_path, train= True, download=True, transform= transform)\n","data_train  = datasets.MNIST(root = data_path, train= False, download=True, transform= transform)\n","\n","print(\"the number of your training data (must be 10,000) = \", data_train.__len__())\n","print(\"hte number of your testing data (must be 60,000) = \", data_test.__len__())\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ef6bacd89d9d4fbe90ae667bad12663f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7909bb857a4a4de4bbee2e328d7f872a","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d2ce214dbae447768989803927c2f524","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz\n","\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"93db8341a96e4ce4a9e0427ddbe7ee38","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Processing...\n","Done!\n","the number of your training data (must be 10,000) =  10000\n","hte number of your testing data (must be 60,000) =  60000\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:480: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)\n","  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"iGD4nqaHbEzy"},"source":["# 2. Model\n","<hr>"]},{"cell_type":"code","metadata":{"id":"hOe3l4eaa16l","executionInfo":{"status":"ok","timestamp":1606548688103,"user_tz":-540,"elapsed":1032,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["class MyModel(nn.Module):\n","\n","    def __init__(self, num_classes=10, size_kernel=5):\n","\n","        super(MyModel, self).__init__()\n","\n","        # *********************************************************************\n","        # input parameter\n","        #\n","        # data size:\n","        #   mnist   : 28 * 28\n","        # \n","        # the tensor given to the model should be of shape [batch_size, 1, height, width]\n","        # because first convolution has in_channels = 1\n","        # *********************************************************************\n","        self.number_class   = num_classes\n","        self.size_kernel    = size_kernel        \n","        \n","        # *********************************************************************\n","        # feature layer\n","        # *********************************************************************\n","        self.conv1          = nn.Conv2d(1, 20, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","        self.conv2          = nn.Conv2d(20, 50, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","\n","        self.conv_layer1    = nn.Sequential(self.conv1, nn.MaxPool2d(kernel_size=2), nn.ReLU(True))\n","        self.conv_layer2    = nn.Sequential(self.conv2, nn.MaxPool2d(kernel_size=2), nn.ReLU(True))\n","\n","        self.feature        = nn.Sequential(self.conv_layer1, self.conv_layer2)\n","        \n","        # *********************************************************************\n","        # classifier layer\n","        # *********************************************************************\n","        self.fc1        = nn.Linear(50*7*7, 50, bias=True)\n","        self.fc2        = nn.Linear(50, num_classes, bias=True)\n","\n","        self.fc_layer1  = nn.Sequential(self.fc1, nn.ReLU(True))\n","        self.fc_layer2  = nn.Sequential(self.fc2, nn.LogSoftmax(dim=1))\n","        \n","\n","        self.classifier = nn.Sequential(self.fc_layer1, self.fc_layer2)\n","        \n","        \n","        # *********************************************************************\n","        # dropout\n","        # *********************************************************************       \n","        self.dropout1 = nn.Dropout(0.25)\n","        self.dropout2 = nn.Dropout(0.5)\n","        \n","        self._initialize_weight()        \n","        \n","    \n","    def _initialize_weight(self):\n","\n","        for m in self.modules():\n","            \n","            if isinstance(m, nn.Conv2d):\n","                \n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","\n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","            elif isinstance(m, nn.Linear):\n","\n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","                \n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","\n","    def forward(self, x):\n","        x = x.to(device)\n","        x = self.feature(x)\n","        x = self.dropout1(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.dropout2(x)\n","        x = self.classifier(x)\n","\n","        return x\n"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yRNF2mR5bgbA"},"source":["# 3. Loss Function\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kw5mL8RobkEx","executionInfo":{"status":"ok","timestamp":1606546111462,"user_tz":-540,"elapsed":11931,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"36e22313-4173-454c-e6da-9931b74c98ed"},"source":["model = MyModel(10, 5).to(device)\n","criterion = nn.CrossEntropyLoss()\n","train_y_pred = model.forward(data_train.data.unsqueeze(dim=1).float())\n","train_y = data_train.targets.to(device)\n","temp_loss = criterion(train_y_pred, train_y)\n","print(temp_loss.data.item())"],"execution_count":6,"outputs":[{"output_type":"stream","text":["776.919677734375\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sEsHl_80816c"},"source":["# 4. Optimization\n","<hr>"]},{"cell_type":"markdown","metadata":{"id":"iCxbwftz-Q2k"},"source":["Define Train Function"]},{"cell_type":"code","metadata":{"id":"PUECilgxbumh","executionInfo":{"status":"ok","timestamp":1606546203354,"user_tz":-540,"elapsed":1091,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def train(model, criterion, train_loader, optimizer, batch_size):\n","  \n","  model.train()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  for xs, ts in iter(train_loader):\n","\n","    iteration = iteration + 1\n","    optimizer.zero_grad()\n","    y_pred = model(xs)\n","    ts = ts.to(device)\n","    loss = criterion(y_pred, ts)\n","    loss.backward()\n","    optimizer.step()\n","    \n","    loss_sum = loss_sum + float(loss)\n","    zs = y_pred.max(1, keepdim=True)[1] # first column has actual prob\n","    acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = round(loss_sum/iteration, 5)\n","  acc_avg = round(acc_sum/iteration, 5)\n","  \n","  return loss_avg, acc_avg"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dcK39hpG-VF5"},"source":["Define Test Function"]},{"cell_type":"code","metadata":{"id":"CzMC4pAp-SuO","executionInfo":{"status":"ok","timestamp":1606546210437,"user_tz":-540,"elapsed":1119,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def test(model,criterion, test_loader, batch_size):\n","  model.eval()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  with torch.no_grad():\n","    for xs, ts in iter(test_loader):\n","      iteration = iteration + 1\n","      ts = ts.to(device)\n","      y_pred = model(xs)\n","      loss_sum = loss_sum + criterion(y_pred, ts).data.item()\n","      zs = y_pred.max(1, keepdim=True)[1]\n","      acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = round(loss_sum/iteration, 5)\n","  acc_avg = round(acc_sum/iteration, 5)\n","\n","  return loss_avg, acc_avg"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nBaK5IVA-Yle"},"source":["Define Gradient Descent Fucntion"]},{"cell_type":"code","metadata":{"id":"j8in-lnH-W2i","executionInfo":{"status":"ok","timestamp":1606546213778,"user_tz":-540,"elapsed":1109,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent(model, optimizer, criterion, batch_size, num_epochs):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","  \n","  \n","  # return variables\n","  train_loss_list, train_acc_list = [], []\n","  test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n","\n","\n","  return train_loss_list, train_acc_list, test_loss_list, test_acc_list\n"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"nOMlKMvs_I5P","executionInfo":{"status":"ok","timestamp":1606546215328,"user_tz":-540,"elapsed":836,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent_with_scheduler(scheduler, model, optimizer, criterion, batch_size, num_epochs, train_loss_list, train_acc_list, test_loss_list, test_acc_list):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","\n","  \n","  # return variables\n","  #train_loss_list, train_acc_list = [], []\n","  #test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    scheduler.step(train_loss_avg)\n","        \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vGh6KmWR_XbX"},"source":["# 5. Plot Function\n","<hr>"]},{"cell_type":"code","metadata":{"id":"ndMV9T4F_Nno","executionInfo":{"status":"ok","timestamp":1606546219977,"user_tz":-540,"elapsed":1114,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_loss(train_loss_list, test_loss_list):\n","  plt.title(\"Loss\")\n","  plt.plot(train_loss_list, c = 'red', label = 'train loss')\n","  plt.plot(test_loss_list, c = 'blue', label = 'test loss')\n","  plt.legend(loc = 'lower right')\n","  plt.show()"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"cHEs1N9t_vNL","executionInfo":{"status":"ok","timestamp":1606546221703,"user_tz":-540,"elapsed":1122,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_accuracy(train_acc_list, test_acc_list):\n","  plt.title(\"Accuracy\")\n","  plt.plot(train_acc_list, c = 'red', label = 'train accuracy')\n","  plt.plot(test_acc_list, c = 'blue', label = 'test accuracy')\n","  plt.legend(loc = 'lower right')\n","  plt.show()"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pjlcXOQE_22Z"},"source":["# 6. Run\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"t5zubL3QCj4R","executionInfo":{"status":"ok","timestamp":1606490334621,"user_tz":-540,"elapsed":834304,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"ca6d6854-7ba2-4b7e-a94a-b5654551ebfc"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model1 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 50\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model1.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model1, optimizer, criterion, batch_size, num_epochs, train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1)\n","\n","# plot\n","plot_loss(train_loss_list1, test_loss_list1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.62      accuracy = 0.8\n","test loss : 0.24       accuracy = 0.92\n","epoch :  10  -------------------------------------- \n","train loss : 0.03      accuracy = 0.98\n","test loss : 0.09       accuracy = 0.97\n","epoch :  20  -------------------------------------- \n","train loss : 0.01      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    24: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    33: reducing learning rate of group 0 to 2.5000e-03.\n","Epoch    39: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  40  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    45: reducing learning rate of group 0 to 6.2500e-04.\n","Epoch    51: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  50  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":950},"id":"aXjcwfTqHOi8","executionInfo":{"status":"ok","timestamp":1606550071039,"user_tz":-540,"elapsed":1374070,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"979f4d21-5e35-4a96-9b7c-236b702ec3b0"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model2 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 100\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model2.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model2, optimizer, criterion, batch_size, num_epochs, train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2)\n","\n","# plot\n","plot_loss(train_loss_list2, test_loss_list2)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.84726      accuracy = 0.72436\n","test loss : 0.26487       accuracy = 0.91923\n","epoch :  10  -------------------------------------- \n","train loss : 0.0737      accuracy = 0.97646\n","test loss : 0.0795       accuracy = 0.97597\n","epoch :  20  -------------------------------------- \n","train loss : 0.04198      accuracy = 0.98718\n","test loss : 0.06594       accuracy = 0.9801\n","Epoch    30: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.02578      accuracy = 0.99069\n","test loss : 0.06463       accuracy = 0.98165\n","epoch :  40  -------------------------------------- \n","train loss : 0.02356      accuracy = 0.99239\n","test loss : 0.06199       accuracy = 0.98247\n","Epoch    46: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  50  -------------------------------------- \n","train loss : 0.02139      accuracy = 0.99149\n","test loss : 0.06239       accuracy = 0.98253\n","epoch :  60  -------------------------------------- \n","train loss : 0.01587      accuracy = 0.99479\n","test loss : 0.0612       accuracy = 0.98315\n","Epoch    71: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  70  -------------------------------------- \n","train loss : 0.01546      accuracy = 0.99429\n","test loss : 0.06202       accuracy = 0.98293\n","epoch :  80  -------------------------------------- \n","train loss : 0.01429      accuracy = 0.99509\n","test loss : 0.06129       accuracy = 0.983\n","Epoch    83: reducing learning rate of group 0 to 6.2500e-04.\n","epoch :  90  -------------------------------------- \n","train loss : 0.01523      accuracy = 0.99519\n","test loss : 0.06138       accuracy = 0.98313\n","Epoch    98: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  100  -------------------------------------- \n","train loss : 0.01534      accuracy = 0.99479\n","test loss : 0.06177       accuracy = 0.98318\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":914},"id":"mhQUn0Zo2itI","executionInfo":{"status":"ok","timestamp":1606554152448,"user_tz":-540,"elapsed":1341434,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"0e1afd25-9654-4770-e3c4-d9ce2abccdd7"},"source":["# model\n","num_classes=10\n","size_kernel=7\n","model3 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 100\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model3.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)\n","\n","# plot\n","plot_loss(train_loss_list3, test_loss_list3)"],"execution_count":34,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.87445      accuracy = 0.70833\n","test loss : 0.24402       accuracy = 0.93017\n","epoch :  10  -------------------------------------- \n","train loss : 0.07214      accuracy = 0.97486\n","test loss : 0.0816       accuracy = 0.97485\n","epoch :  20  -------------------------------------- \n","train loss : 0.03971      accuracy = 0.98688\n","test loss : 0.07057       accuracy = 0.97907\n","epoch :  30  -------------------------------------- \n","train loss : 0.02691      accuracy = 0.99219\n","test loss : 0.07332       accuracy = 0.97922\n","epoch :  40  -------------------------------------- \n","train loss : 0.01742      accuracy = 0.99439\n","test loss : 0.07023       accuracy = 0.98115\n","epoch :  50  -------------------------------------- \n","train loss : 0.0164      accuracy = 0.99479\n","test loss : 0.0702       accuracy = 0.98198\n","epoch :  60  -------------------------------------- \n","train loss : 0.01049      accuracy = 0.997\n","test loss : 0.06953       accuracy = 0.9824\n","Epoch    66: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  70  -------------------------------------- \n","train loss : 0.00873      accuracy = 0.9973\n","test loss : 0.06852       accuracy = 0.983\n","epoch :  80  -------------------------------------- \n","train loss : 0.00945      accuracy = 0.9974\n","test loss : 0.06948       accuracy = 0.9827\n","Epoch    85: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  90  -------------------------------------- \n","train loss : 0.00486      accuracy = 0.999\n","test loss : 0.06863       accuracy = 0.9832\n","Epoch    97: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  100  -------------------------------------- \n","train loss : 0.00734      accuracy = 0.9974\n","test loss : 0.0687       accuracy = 0.9834\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HmpBNNy4GEZ7","executionInfo":{"status":"ok","timestamp":1606554870323,"user_tz":-540,"elapsed":149263,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"04c4cbad-4dc0-453c-9460-95ddad05d11b"},"source":["# num of epochs\n","num_epochs = 10\n","\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)"],"execution_count":47,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.00588      accuracy = 0.9986\n","test loss : 0.06838       accuracy = 0.98342\n","Epoch   103: reducing learning rate of group 0 to 6.2500e-04.\n","Epoch   109: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  10  -------------------------------------- \n","train loss : 0.00612      accuracy = 0.9981\n","test loss : 0.06843       accuracy = 0.98352\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eKRksqDLIuz8","executionInfo":{"status":"ok","timestamp":1606555627743,"user_tz":-540,"elapsed":680355,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"851b8e40-c4c5-4a6a-b1d9-0b1af70dc827"},"source":["# num of epochs\n","num_epochs = 50\n","\n","gradient_descent_with_scheduler(scheduler, model3, optimizer, criterion, batch_size, num_epochs, train_loss_list3, train_acc_list3, test_loss_list3, test_acc_list3)"],"execution_count":48,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.00628      accuracy = 0.9982\n","test loss : 0.06825       accuracy = 0.9835\n","Epoch   115: reducing learning rate of group 0 to 1.5625e-04.\n","Epoch   121: reducing learning rate of group 0 to 7.8125e-05.\n","epoch :  10  -------------------------------------- \n","train loss : 0.0081      accuracy = 0.997\n","test loss : 0.06801       accuracy = 0.98352\n","Epoch   127: reducing learning rate of group 0 to 3.9063e-05.\n","Epoch   133: reducing learning rate of group 0 to 1.9531e-05.\n","epoch :  20  -------------------------------------- \n","train loss : 0.00721      accuracy = 0.9978\n","test loss : 0.06792       accuracy = 0.98347\n","Epoch   139: reducing learning rate of group 0 to 9.7656e-06.\n","epoch :  30  -------------------------------------- \n","train loss : 0.00603      accuracy = 0.9984\n","test loss : 0.06793       accuracy = 0.9835\n","Epoch   145: reducing learning rate of group 0 to 4.8828e-06.\n","Epoch   151: reducing learning rate of group 0 to 2.4414e-06.\n","epoch :  40  -------------------------------------- \n","train loss : 0.00484      accuracy = 0.999\n","test loss : 0.06793       accuracy = 0.9835\n","Epoch   159: reducing learning rate of group 0 to 1.2207e-06.\n","epoch :  50  -------------------------------------- \n","train loss : 0.00594      accuracy = 0.9984\n","test loss : 0.06793       accuracy = 0.98348\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qISg3LmyscvZ"},"source":["# 7. Output\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2RFLHqzTL6r6","executionInfo":{"status":"ok","timestamp":1606555784817,"user_tz":-540,"elapsed":1092,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"83c0dabe-49c5-4979-b35b-8b5300e73c5e"},"source":["length = len(test_acc_list3)-10\n","print(length)"],"execution_count":54,"outputs":[{"output_type":"stream","text":["153\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s_0Ot6RKsxCa"},"source":["1. Plot the training and testing losses over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"mK27slJbshCl","executionInfo":{"status":"ok","timestamp":1606555787569,"user_tz":-540,"elapsed":1107,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"2569001c-1f99-46d3-e1ee-eba17f6c9d7c"},"source":["plot_loss(train_loss_list3[0:length], test_loss_list3[0:length])"],"execution_count":55,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hL_wzb4rs_3u"},"source":["2. Plot the training and testing accuracies over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"knwCQPkptB29","executionInfo":{"status":"ok","timestamp":1606555799077,"user_tz":-540,"elapsed":1535,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"4c7bd88f-2894-4c39-e833-6fc342a76d6b"},"source":["plot_accuracy(train_acc_list3[0:length], test_acc_list3[0:length])"],"execution_count":56,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GZuSewTmtCOv"},"source":["3. Print the final training and testing losses at convergence [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"0ATX-xVZtEPx","executionInfo":{"status":"ok","timestamp":1606555839529,"user_tz":-540,"elapsed":1123,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"1f3664c7-1c68-4222-dfb7-03382a895d8b"},"source":["data1 = {'' : [train_loss_list3[length-1], test_loss_list3[length-1]]}\n","index1 = ['training', 'testing']\n","frame1 = DataFrame(data1, index = index1)\n","frame1.columns.name = 'loss'\n","frame1"],"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>loss</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>training</th>\n","      <td>0.00484</td>\n","    </tr>\n","    <tr>\n","      <th>testing</th>\n","      <td>0.06793</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["loss             \n","training  0.00484\n","testing   0.06793"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"7ncg1mBCtE4O"},"source":["4. Print the final training and testing accuracies at convergence [20pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"0lHQ6nSvtGVW","executionInfo":{"status":"ok","timestamp":1606555852247,"user_tz":-540,"elapsed":1253,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"bab824ab-8780-4019-a33c-07cbd1bb9845"},"source":["data2 = {'' : [train_acc_list3[length-1], test_acc_list3[length-1]]}\n","index2 = ['training', 'testing']\n","frame2 = DataFrame(data2, index = index2)\n","frame2.columns.name = 'accuracy'\n","frame2"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>accuracy</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>training</th>\n","      <td>0.9990</td>\n","    </tr>\n","    <tr>\n","      <th>testing</th>\n","      <td>0.9835</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["accuracy        \n","training  0.9990\n","testing   0.9835"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"markdown","metadata":{"id":"O4O9lSxhGVHp"},"source":["5. Print the testing accuracies within the last 10 epochs [5pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_mfxC0ZGVbU","executionInfo":{"status":"ok","timestamp":1606555858537,"user_tz":-540,"elapsed":1103,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"0bb8f34a-26b1-4a3c-a7b8-050dc8293c9d"},"source":["for i in range(10):\n","  idx = length - 10 + i\n","  print(\"[epoch = {}] {}\".format(idx, test_acc_list3[idx]))"],"execution_count":60,"outputs":[{"output_type":"stream","text":["[epoch = 143] 0.9835\n","[epoch = 144] 0.9835\n","[epoch = 145] 0.9835\n","[epoch = 146] 0.9835\n","[epoch = 147] 0.9835\n","[epoch = 148] 0.9835\n","[epoch = 149] 0.9835\n","[epoch = 150] 0.9835\n","[epoch = 151] 0.9835\n","[epoch = 152] 0.9835\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qo0zhtdRHMJP"},"source":[""],"execution_count":null,"outputs":[]}]}