{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Convolutional Neural Network for the classification task on MNIST","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNTGjGiHAgCpXNL/s7MXSlM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"2d1d4eb3967c4697834d503920bb678e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_271e333fa6b2478d8d4b690b6cb0cd0a","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_160e7ce11ae649fab68f3f1e718924cd","IPY_MODEL_e76c0e401b1b4198a9b76acc1822aa92"]}},"271e333fa6b2478d8d4b690b6cb0cd0a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"160e7ce11ae649fab68f3f1e718924cd":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_69c70250cebe4befb9ce7016df69a7c6","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5d3b43331d8841f1bdd7469f4a157d30"}},"e76c0e401b1b4198a9b76acc1822aa92":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_93fd2e0b2daa4150aff3d2f1296c9af8","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 9920512/? [00:19&lt;00:00, 2032143.72it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_79a5858c3a174595ba5a3228b90b5824"}},"69c70250cebe4befb9ce7016df69a7c6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"5d3b43331d8841f1bdd7469f4a157d30":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"93fd2e0b2daa4150aff3d2f1296c9af8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"79a5858c3a174595ba5a3228b90b5824":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ebbcb57ec6e84b1bb68a2df523d9fa1f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_e1ea247a718f4417b823e20cb6d00c0d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_1f451f8183474801988b60499f949af6","IPY_MODEL_ba7ea38130984b65baf2a1bd4127941f"]}},"e1ea247a718f4417b823e20cb6d00c0d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1f451f8183474801988b60499f949af6":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_731026fb843d4e25936b31876ebecb5e","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b4a90fee1cac40c890db1201fd800ee9"}},"ba7ea38130984b65baf2a1bd4127941f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_eb89337df09f4b3f844e9a781914e951","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 32768/? [00:00&lt;00:00, 117277.44it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_addb033e343b4b2181a2ba64f7ed45bf"}},"731026fb843d4e25936b31876ebecb5e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"b4a90fee1cac40c890db1201fd800ee9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"eb89337df09f4b3f844e9a781914e951":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"addb033e343b4b2181a2ba64f7ed45bf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6d3705341bc74960a19c33bbcbd4a876":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_fa7e0a68cc194120b7d1e6e6e3b52128","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e35878906bbe4c65ae9df9ae4e8a59fc","IPY_MODEL_e5d288e6fa904518940e78873c06ed28"]}},"fa7e0a68cc194120b7d1e6e6e3b52128":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e35878906bbe4c65ae9df9ae4e8a59fc":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_b092ad0c38be44f39528e987271aebbf","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_680aa9578f2d474abee4511d50c01634"}},"e5d288e6fa904518940e78873c06ed28":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c94e1fb183de448ca8b972bf49a32b11","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 1654784/? [00:18&lt;00:00, 528539.21it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fc97b79f67294f8487165f642c1bd93f"}},"b092ad0c38be44f39528e987271aebbf":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"680aa9578f2d474abee4511d50c01634":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c94e1fb183de448ca8b972bf49a32b11":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"fc97b79f67294f8487165f642c1bd93f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"aa14be3838634761a8ce10d8030dd977":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_bf596a56162646ab85f5b1e064f22cf4","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3026b2e89f4e445792981941360eff42","IPY_MODEL_0a805aa950e74f85a9d8edad8d47bf14"]}},"bf596a56162646ab85f5b1e064f22cf4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3026b2e89f4e445792981941360eff42":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_37ee2529d17b4faab162402be1a10d57","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a2296c1de88e4584a4ffd210000363f0"}},"0a805aa950e74f85a9d8edad8d47bf14":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_499791df7a5f4310a83a91cac7a26625","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 8192/? [00:04&lt;00:00, 1885.94it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c083cdaa23b44a5a8b67e20e20a8ada0"}},"37ee2529d17b4faab162402be1a10d57":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"a2296c1de88e4584a4ffd210000363f0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"499791df7a5f4310a83a91cac7a26625":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"c083cdaa23b44a5a8b67e20e20a8ada0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"7CTKJvoNaDN6"},"source":["# 0. Setting\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"lViQWOgFaCpA","executionInfo":{"status":"ok","timestamp":1606483033978,"user_tz":-540,"elapsed":5184,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"e1d48e36-4e56-4d11-92a4-4f58f7ea109d"},"source":["# import library\n","import torch\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","import math\n","from pandas import Series, DataFrame\n","import pandas as pd\n","import numpy as np\n","import torch.nn.functional as F\n","import math\n","\n","\n","torch.__version__\n"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'1.7.0+cu101'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hkB1yaCsaF9k","executionInfo":{"status":"ok","timestamp":1606483040711,"user_tz":-540,"elapsed":1034,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"4e37b1d6-f061-4b3d-b4b0-80c8ff065a23"},"source":["# using gpu \n","use_cuda = True\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(torch.cuda.is_available())\n","print(device)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["True\n","cuda\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sYRIA056aV3r"},"source":["# 1. Data\n","<hr>"]},{"cell_type":"code","metadata":{"id":"sqgSPJpraM6q","executionInfo":{"status":"ok","timestamp":1606483043450,"user_tz":-540,"elapsed":911,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["from torchvision import transforms, datasets\n","\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.1307,),(0.3081,)),  # mean value = 0.1307, standard deviation value = 0.3081\n","])\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429,"referenced_widgets":["2d1d4eb3967c4697834d503920bb678e","271e333fa6b2478d8d4b690b6cb0cd0a","160e7ce11ae649fab68f3f1e718924cd","e76c0e401b1b4198a9b76acc1822aa92","69c70250cebe4befb9ce7016df69a7c6","5d3b43331d8841f1bdd7469f4a157d30","93fd2e0b2daa4150aff3d2f1296c9af8","79a5858c3a174595ba5a3228b90b5824","ebbcb57ec6e84b1bb68a2df523d9fa1f","e1ea247a718f4417b823e20cb6d00c0d","1f451f8183474801988b60499f949af6","ba7ea38130984b65baf2a1bd4127941f","731026fb843d4e25936b31876ebecb5e","b4a90fee1cac40c890db1201fd800ee9","eb89337df09f4b3f844e9a781914e951","addb033e343b4b2181a2ba64f7ed45bf","6d3705341bc74960a19c33bbcbd4a876","fa7e0a68cc194120b7d1e6e6e3b52128","e35878906bbe4c65ae9df9ae4e8a59fc","e5d288e6fa904518940e78873c06ed28","b092ad0c38be44f39528e987271aebbf","680aa9578f2d474abee4511d50c01634","c94e1fb183de448ca8b972bf49a32b11","fc97b79f67294f8487165f642c1bd93f","aa14be3838634761a8ce10d8030dd977","bf596a56162646ab85f5b1e064f22cf4","3026b2e89f4e445792981941360eff42","0a805aa950e74f85a9d8edad8d47bf14","37ee2529d17b4faab162402be1a10d57","a2296c1de88e4584a4ffd210000363f0","499791df7a5f4310a83a91cac7a26625","c083cdaa23b44a5a8b67e20e20a8ada0"]},"id":"xg6JTlymatLg","executionInfo":{"status":"ok","timestamp":1606483051143,"user_tz":-540,"elapsed":3509,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"a607cb6a-fbdc-40d0-a0da-60b259df4af0"},"source":["data_path = './MNIST'\n","\n","data_test   = datasets.MNIST(root = data_path, train= True, download=True, transform= transform)\n","data_train  = datasets.MNIST(root = data_path, train= False, download=True, transform= transform)\n","\n","print(\"the number of your training data (must be 10,000) = \", data_train.__len__())\n","print(\"hte number of your testing data (must be 60,000) = \", data_test.__len__())\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"2d1d4eb3967c4697834d503920bb678e","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ebbcb57ec6e84b1bb68a2df523d9fa1f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6d3705341bc74960a19c33bbcbd4a876","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"aa14be3838634761a8ce10d8030dd977","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./MNIST/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/MNIST/raw\n","Processing...\n","Done!\n","the number of your training data (must be 10,000) =  10000\n","hte number of your testing data (must be 60,000) =  60000\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/torchvision/datasets/mnist.py:480: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)\n","  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"iGD4nqaHbEzy"},"source":["# 2. Model\n","<hr>"]},{"cell_type":"code","metadata":{"id":"hOe3l4eaa16l","executionInfo":{"status":"ok","timestamp":1606496322219,"user_tz":-540,"elapsed":873,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["class MyModel(nn.Module):\n","\n","    def __init__(self, num_classes=10, size_kernel=5):\n","\n","        super(MyModel, self).__init__()\n","\n","        # *********************************************************************\n","        # input parameter\n","        #\n","        # data size:\n","        #   mnist   : 28 * 28\n","        # \n","        # the tensor given to the model should be of shape [batch_size, 1, height, width]\n","        # because first convolution has in_channels = 1\n","        # *********************************************************************\n","        self.number_class   = num_classes\n","        self.size_kernel    = size_kernel        \n","        \n","        # *********************************************************************\n","        # feature layer\n","        # *********************************************************************\n","        self.conv1          = nn.Conv2d(1, 32, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","        self.conv2          = nn.Conv2d(32, 64, kernel_size=size_kernel, stride=1, padding=int((size_kernel-1)/2), bias=True)\n","\n","        self.conv_layer1    = nn.Sequential(self.conv1, nn.MaxPool2d(kernel_size=2), nn.LeakyReLU(True))\n","        self.conv_layer2    = nn.Sequential(self.conv2, nn.MaxPool2d(kernel_size=2), nn.LeakyReLU(True))\n","\n","        self.feature        = nn.Sequential(self.conv_layer1, self.conv_layer2)\n","        \n","        # *********************************************************************\n","        # classifier layer\n","        # *********************************************************************\n","        self.fc1        = nn.Linear(64*7*7, 128, bias=True)\n","        self.fc2        = nn.Linear(128, num_classes, bias=True)\n","\n","        self.fc_layer1  = nn.Sequential(self.fc1, nn.LeakyReLU(True))\n","        self.fc_layer2  = nn.Sequential(self.fc2, nn.LogSoftmax(dim=1))\n","        \n","\n","        self.classifier = nn.Sequential(self.fc_layer1, self.fc_layer2)\n","        \n","        \n","        # *********************************************************************\n","        # dropout\n","        # *********************************************************************       \n","        self.dropout1 = nn.Dropout(0.3)\n","        self.dropout2 = nn.Dropout(0.5)\n","        \n","        self._initialize_weight()        \n","        \n","    \n","    def _initialize_weight(self):\n","\n","        for m in self.modules():\n","            \n","            if isinstance(m, nn.Conv2d):\n","                \n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","\n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","            elif isinstance(m, nn.Linear):\n","\n","                #nn.init.xavier_uniform_(m.weight, gain=math.sqrt(2))\n","                nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')\n","                \n","                if m.bias is not None:\n","\n","                    m.bias.data.zero_()\n","\n","\n","    def forward(self, x):\n","        x = x.to(device)\n","        x = self.feature(x)\n","        x = self.dropout1(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.dropout2(x)\n","        x = self.classifier(x)\n","\n","        return x\n"],"execution_count":97,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yRNF2mR5bgbA"},"source":["# 3. Loss Function\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kw5mL8RobkEx","executionInfo":{"status":"ok","timestamp":1606496325514,"user_tz":-540,"elapsed":922,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"d652bc1b-ae90-4bbe-8740-0bad00876652"},"source":["model = MyModel(10, 5).to(device)\n","criterion = nn.CrossEntropyLoss()\n","train_y_pred = model.forward(data_train.data.unsqueeze(dim=1).float())\n","train_y = data_train.targets.to(device)\n","temp_loss = criterion(train_y_pred, train_y)\n","print(temp_loss.data.item())"],"execution_count":98,"outputs":[{"output_type":"stream","text":["1098.1788330078125\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sEsHl_80816c"},"source":["# 4. Optimization\n","<hr>"]},{"cell_type":"markdown","metadata":{"id":"iCxbwftz-Q2k"},"source":["Define Train Function"]},{"cell_type":"code","metadata":{"id":"PUECilgxbumh","executionInfo":{"status":"ok","timestamp":1606487273026,"user_tz":-540,"elapsed":911,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def train(model, criterion, train_loader, optimizer, batch_size):\n","  \n","  model.train()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  for xs, ts in iter(train_loader):\n","\n","    iteration = iteration + 1\n","    optimizer.zero_grad()\n","    y_pred = model(xs)\n","    ts = ts.to(device)\n","    loss = criterion(y_pred, ts)\n","    loss.backward()\n","    optimizer.step()\n","    \n","    loss_sum = loss_sum + float(loss)\n","    zs = y_pred.max(1, keepdim=True)[1] # first column has actual prob\n","    acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = math.trunc(loss_sum/iteration * 100) / 100\n","  acc_avg = math.trunc(acc_sum/iteration * 100) / 100\n","  \n","  return loss_avg, acc_avg"],"execution_count":66,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dcK39hpG-VF5"},"source":["Define Test Function"]},{"cell_type":"code","metadata":{"id":"CzMC4pAp-SuO","executionInfo":{"status":"ok","timestamp":1606487267862,"user_tz":-540,"elapsed":943,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def test(model,criterion, test_loader, batch_size):\n","  model.eval()\n","  loss_sum = 0\n","  acc_sum = 0\n","  iteration = 0\n","  with torch.no_grad():\n","    for xs, ts in iter(test_loader):\n","      iteration = iteration + 1\n","      ts = ts.to(device)\n","      y_pred = model(xs)\n","      loss_sum = loss_sum + criterion(y_pred, ts).data.item()\n","      zs = y_pred.max(1, keepdim=True)[1]\n","      acc_sum = acc_sum + zs.eq(ts.view_as(zs)).sum().item()/batch_size\n","  \n","  loss_avg = math.trunc(loss_sum/iteration * 100) / 100\n","  acc_avg = math.trunc(acc_sum/iteration * 100) / 100\n","\n","  return loss_avg, acc_avg"],"execution_count":65,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nBaK5IVA-Yle"},"source":["Define Gradient Descent Fucntion"]},{"cell_type":"code","metadata":{"id":"j8in-lnH-W2i","executionInfo":{"status":"ok","timestamp":1606486882717,"user_tz":-540,"elapsed":762,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent(model, optimizer, criterion, batch_size, num_epochs):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","  \n","  \n","  # return variables\n","  train_loss_list, train_acc_list = [], []\n","  test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n","\n","\n","  return train_loss_list, train_acc_list, test_loss_list, test_acc_list\n"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"nOMlKMvs_I5P","executionInfo":{"status":"ok","timestamp":1606487467883,"user_tz":-540,"elapsed":1422,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def gradient_descent_with_scheduler(scheduler, model, optimizer, criterion, batch_size, num_epochs, train_loss_list, train_acc_list, test_loss_list, test_acc_list):\n","\n","  # batching\n","  train_loader = torch.utils.data.DataLoader(\n","      data_train,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=True,\n","      drop_last=True)\n","  \n","  test_loader = torch.utils.data.DataLoader(\n","      data_test,\n","      batch_size=batch_size,\n","      num_workers=4,\n","      shuffle=False,\n","      drop_last=True)\n","\n","  \n","  # return variables\n","  #train_loss_list, train_acc_list = [], []\n","  #test_loss_list, test_acc_list = [], []\n","\n","  \n","  # run training & testing\n","  for epoch in range(num_epochs + 1):\n","\n","    train_loss_avg, train_acc_avg = train(model, criterion, train_loader, optimizer, batch_size)\n","    test_loss_avg, test_acc_avg = test(model, criterion, test_loader, batch_size)\n","    scheduler.step(train_loss_avg)\n","        \n","    # add loss and accuracy data\n","    train_loss_list.append(train_loss_avg)\n","    train_acc_list.append(train_acc_avg)\n","    test_loss_list.append(test_loss_avg)\n","    test_acc_list.append(test_acc_avg)\n","\n","    # print\n","    if epoch % 10 != 0 :\n","      continue\n","\n","    print(\"epoch : \", epoch, \" -------------------------------------- \")\n","    print(\"train loss : {}      accuracy = {}\".format(train_loss_avg, train_acc_avg))\n","    print(\"test loss : {}       accuracy = {}\".format(test_loss_avg, test_acc_avg))\n"],"execution_count":72,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vGh6KmWR_XbX"},"source":["# 5. Plot Function\n","<hr>"]},{"cell_type":"code","metadata":{"id":"ndMV9T4F_Nno","executionInfo":{"status":"ok","timestamp":1606485473164,"user_tz":-540,"elapsed":1020,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_loss(train_loss_list, test_loss_list):\n","  plt.title(\"Loss\")\n","  plt.plot(train_loss_list, c = 'red', label = 'train loss')\n","  plt.plot(test_loss_list, c = 'blue', label = 'test loss')\n","  plt.legend(loc = 'lower right')\n","  plt.show()"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"cHEs1N9t_vNL","executionInfo":{"status":"ok","timestamp":1606485501588,"user_tz":-540,"elapsed":990,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}}},"source":["def plot_accuracy(train_acc_list, test_acc_list):\n","  plt.title(\"Accuracy\")\n","  plt.plot(train_acc_list8, c = 'red', label = 'train accuracy')\n","  plt.plot(test_acc_list8, c = 'blue', label = 'test accuracy')\n","  plt.legend(loc = 'lower right')\n","  plt.show()"],"execution_count":35,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pjlcXOQE_22Z"},"source":["# 6. Run\n","<hr>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"t5zubL3QCj4R","executionInfo":{"status":"ok","timestamp":1606490334621,"user_tz":-540,"elapsed":834304,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"ca6d6854-7ba2-4b7e-a94a-b5654551ebfc"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model1 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 50\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model1.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model1, optimizer, criterion, batch_size, num_epochs, train_loss_list1, train_acc_list1, test_loss_list1, test_acc_list1)\n","\n","# plot\n","plot_loss(train_loss_list1, test_loss_list1)"],"execution_count":84,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 0.62      accuracy = 0.8\n","test loss : 0.24       accuracy = 0.92\n","epoch :  10  -------------------------------------- \n","train loss : 0.03      accuracy = 0.98\n","test loss : 0.09       accuracy = 0.97\n","epoch :  20  -------------------------------------- \n","train loss : 0.01      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    24: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  30  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    33: reducing learning rate of group 0 to 2.5000e-03.\n","Epoch    39: reducing learning rate of group 0 to 1.2500e-03.\n","epoch :  40  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n","Epoch    45: reducing learning rate of group 0 to 6.2500e-04.\n","Epoch    51: reducing learning rate of group 0 to 3.1250e-04.\n","epoch :  50  -------------------------------------- \n","train loss : 0.0      accuracy = 0.99\n","test loss : 0.07       accuracy = 0.97\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":633},"id":"aXjcwfTqHOi8","executionInfo":{"status":"ok","timestamp":1606491421288,"user_tz":-540,"elapsed":789655,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"9ae86080-ee17-409f-b1d4-b0a199da2f94"},"source":["# model\n","num_classes=10\n","size_kernel=5\n","model2 = MyModel(num_classes, size_kernel).to(device)\n","\n","# mini-batch size\n","batch_size = 32\n","\n","# num of epochs\n","num_epochs = 50\n","\n","# learning rate\n","learning_rate = 0.01\n","\n","# optimizer\n","optimizer = torch.optim.SGD(model2.parameters(), lr = learning_rate, weight_decay=0.0001)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', factor=0.5, patience = 5, verbose=True)   \n","\n","# loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# run\n","train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2 = [], [], [], []\n","gradient_descent_with_scheduler(scheduler, model2, optimizer, criterion, batch_size, num_epochs, train_loss_list2, train_acc_list2, test_loss_list2, test_acc_list2)\n","\n","# plot\n","plot_loss(train_loss_list2, test_loss_list2)"],"execution_count":89,"outputs":[{"output_type":"stream","text":["epoch :  0  -------------------------------------- \n","train loss : 1.03      accuracy = 0.66\n","test loss : 0.32       accuracy = 0.9\n","epoch :  10  -------------------------------------- \n","train loss : 0.06      accuracy = 0.97\n","test loss : 0.08       accuracy = 0.97\n","epoch :  20  -------------------------------------- \n","train loss : 0.04      accuracy = 0.98\n","test loss : 0.06       accuracy = 0.97\n","epoch :  30  -------------------------------------- \n","train loss : 0.02      accuracy = 0.99\n","test loss : 0.06       accuracy = 0.98\n","Epoch    36: reducing learning rate of group 0 to 5.0000e-03.\n","epoch :  40  -------------------------------------- \n","train loss : 0.02      accuracy = 0.99\n","test loss : 0.06       accuracy = 0.98\n","Epoch    48: reducing learning rate of group 0 to 2.5000e-03.\n","epoch :  50  -------------------------------------- \n","train loss : 0.01      accuracy = 0.99\n","test loss : 0.06       accuracy = 0.98\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"qISg3LmyscvZ"},"source":["# 7. Output\n","<hr>"]},{"cell_type":"markdown","metadata":{"id":"s_0Ot6RKsxCa"},"source":["1. Plot the training and testing losses over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"mK27slJbshCl","executionInfo":{"status":"ok","timestamp":1606497374733,"user_tz":-540,"elapsed":935,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"5d9fc328-9b0f-4d17-dfab-5f041736ef46"},"source":["plot_loss(train_loss_list2, test_loss_list2)"],"execution_count":100,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hL_wzb4rs_3u"},"source":["2. Plot the training and testing accuracies over epochs [2pt]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":556},"id":"knwCQPkptB29","executionInfo":{"status":"error","timestamp":1606497403451,"user_tz":-540,"elapsed":1560,"user":{"displayName":"장예솔","photoUrl":"","userId":"10358588701743689220"}},"outputId":"e389a2dc-70d7-4394-cfae-a9718323418e"},"source":["plot_accuracy(train_acc_list2, test_acc_list2)"],"execution_count":101,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-101-ff2b6d580505>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplot_accuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_acc_list2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_acc_list2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-35-35e0cec83836>\u001b[0m in \u001b[0;36mplot_accuracy\u001b[0;34m(train_acc_list, test_acc_list)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplot_accuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_acc_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_acc_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Accuracy\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_acc_list8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'train accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_acc_list8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'test accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'lower right'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'train_acc_list8' is not defined"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GZuSewTmtCOv"},"source":["3. Print the final training and testing losses at convergence [2pt]"]},{"cell_type":"code","metadata":{"id":"0ATX-xVZtEPx"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7ncg1mBCtE4O"},"source":["4. Print the final training and testing accuracies at convergence [20pt]"]},{"cell_type":"code","metadata":{"id":"0lHQ6nSvtGVW"},"source":[""],"execution_count":null,"outputs":[]}]}